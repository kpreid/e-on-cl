; Copyright 2005-2006 Kevin Reid, under the terms of the MIT X license
; found at http://www.opensource.org/licenses/mit-license.html ................

(defclass for-test () ())

(deftest unexternalizable-optimization.no
  (macrolet ((x (&environment e) (unexternalizable-optimization-p e)))
    (x))
  nil)

(deftest unexternalizable-optimization.yes
  (macrolet ((x (&environment e) (unexternalizable-optimization-p e)))
    (with-unexternalizable-optimization (x)))
  t)

(deftest vtable-prefix-enough 
  (princ-to-string (nth-value 1 (ignore-errors 
    (eval `(def-vtable for-test
             (:|run| ()
               :hi))))))
  "Method \"run\" has 0 parameters, which is not enough to accept 1 prefix argument.")

(defun same-or-objects (test a b)
  (if (funcall test a b)
    t
    (values a b)))

(deftest guard->type-specifier->guard
  (let ((guard (e-lambda "$typeSpecifierTest" ())))
    (same-or-objects #'samep guard (type-specifier-to-guard (guard-to-type-specifier guard))))
  t)
  
(deftest type-specifier->guard->type-specifier
  (let ((ts '(integer -10 10)))
    (same-or-objects #'equal ts (guard-to-type-specifier (type-specifier-to-guard ts))))
  t)
  
(deftest e-print-class-guard
  (e-print (type-specifier-to-guard (find-class 'integer)))
  "int")