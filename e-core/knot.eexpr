pragma.enable("easy-return")
pragma.disable("explicit-result-guard")

pragma.enable("trinary-define")
pragma.enable("anon-lambda")

/** Converts an optional unget value into an optional uncall value. Currently does not check whether 'name' is a string. */
def ungetToUncall(loader, name) {
  return if (name != null) {
    [loader, "get", [name]]
  }
}

/**
 * Such-that isn't ordinarily defined at this level so we copy in a minimal definition
 * Copyright 2005 Mark S. Miller under the terms of the MIT X license
 * found at http://www.opensource.org/licenses/mit-license.html ................
 */
def __suchThat {
  to run(specimen, optEjector) :any { return [specimen, specimen] }
  
  to handle(expr, flag) :any {
    return def suchThatFunc(_, optEjector) :void {
      if (!flag) {
        throw.eject(optEjector, "such-that failure")
      }
    }
    return suchThatFunc
  }
}

/** Converts an optional uncall value into an optional unget value. That is, returns 'name' if 'portrayal' matches [==loader, =="get", [name]]; otherwise null. */
def uncallToUnget (loader, portrayal) {
  # xxx I do not understand the justification in the doc-comment of E-on-Java baseLoader#optUnget.
  def [a ? (a==loader), b ? (b=="get"), [name]] := (portrayal, fn _ {return null})
  return name
}


def makePathLoader implements DeepFrozenStamp {
  to run(name :String, fetchpath :ConstList) {
    def loader {
      to __printOn(tw :TextWriter) {
        tw.print("<", name, ":*>")
      }
      to fetch(fqn :String, absentThunk) {
        return \
          if (fqn.run(fqn.size() - 2, fqn.size()) == ".*") {
            getSafeScope()["import__uriGetter"] \
              ["org.erights.e.elang.interp.makePackageLoader"] \
                .run(loader, name + ":", fqn)
          } else {
            for sub in fetchpath {
              escape next { return sub.fetch(fqn, next) }
            }
            absentThunk()
          }
      }
      to get(fqn) {
        return loader.fetch(fqn,
          def getFailureThunk() { 
            throw(E.toQuote(loader) + " can't find " + E.toQuote(fqn)) })
      }
      to optUncall(specimen) {
        for sub ? sub.__respondsTo("optUnget", 1) in fetchpath {
          def uncall := ungetToUncall(loader, sub.optUnget(specimen))
          if (uncall != null) {
            return uncall 
          }
        }
        return null
      }
      to optUnget(specimen) {
        # xxx this is how Java-E does it, and claims a justification, but *what*?
        return uncallToUnget(loader, loader.optUncall(specimen))
      }
    }
    return loader
  }
}

trace("about to store makePathLoader")
lisp["E.KNOT", "+THE-MAKE-PATH-LOADER+"].setValue(makePathLoader)
trace("did store makePathLoader")
