# Copyright 2007 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

  ? pragma.syntax("0.9")
  > pragma.enable("accumulator")

  ? def makeVine := <import:net.captp.tables.makeVine>; null
  ? def makeFlexMap := <elib:tables.makeFlexMap>; null
  ? def deSubgraphKit := <elib:serial.deSubgraphKit>; null
  ? def makeCycleBreaker := <elib:tables.makeCycleBreaker>; null

In this file, we test that two linked CapTPConnections communicate successfully.

  ? def makeCapTPConnection := <import:net.captp.comm.makeCapTPConnection>
  # value: <makeCapTPConnection>
  
  ? var i := 10000000
  > /** Deterministic source of pseudo-SwissNumbers so that our tracing output is deterministic. */
  > def pseudoEntropy {
  >   to nextSwiss() { return (i += 1) }
  > }
  > def pseudoWhenGarbage(_, _) {}
  > null

This is a mechanism for tracing communication between the CapTPConnections.

  ? interface ArgWrapperMarker {}
  > def descs {
  >   match [v, a] { 
  >     def generic {
  >       to __printOn(out :TextWriter) { 
  >         out.print(v, "Desc")
  >         a.printOn("(", ", ", ")", out)
  >       }
  >       to __optUncall() { return [descs, v, a] }
  >     }
  >   }
  > }
  > def unscopeForTestIncoming := {
  >   def u := deSubgraphKit.getDefaultUnscope().diverge()
  >   u[descs] := "CapTP_1_descs"
  >   u.snapshot()
  > }
  > def traceBuilderMaker(mb) {
  >   return fn {
  >     def innerBuilder := mb()
  >     
  >     def traceBuilder extends deSubgraphKit.makeBuilder(deSubgraphKit.getDefaultScope() | ["CapTP_1_descs" => descs]) {
  >       to buildRoot(value) {
  >         def argValue := deSubgraphKit.makeRecognizer(null, unscopeForTestIncoming).recognize(value, innerBuilder)
  >         def argWrapper implements ArgWrapperMarker {
  >           to show() { return value }
  >           to get() { return argValue }
  >         }
  >         return argWrapper
  >       }
  >     }
  >   } 
  > }
  > def traceReceiver(label, ref) {
  >   return def wrapper match [v,a] {
  >     stdout.print(label, " <- ", v)
  >     accum [] for arg in a { _.with(if (arg =~ aw :ArgWrapperMarker) { aw.show() } else { arg }) }.printOn("(", ", ", ")", stdout)
  >     stdout.println()
  >     E.call(ref, v, accum [] for arg in a { _.with(if (arg =~ aw :ArgWrapperMarker) { aw.get() } else { arg }) })
  >   }
  > }
  > null

Now we can make the SwissTables and connections.

  ? def swissTableL := <import:net.captp.tables.makeSwissTable>(pseudoEntropy, makeFlexMap, makeFlexMap); null
  ? def swissTableR := <import:net.captp.tables.makeSwissTable>(pseudoEntropy, makeFlexMap, makeFlexMap); null
  
  ? def [[receiverL, mbL, rnlL], [receiverR, mbR, rnlR]] := 
  >   [makeCapTPConnection(traceReceiver("Right", receiverR),
  >                        traceBuilderMaker(mbR),
  >                        swissTableL,
  >                        pseudoWhenGarbage),
  >    makeCapTPConnection(traceReceiver("Left", receiverL), 
  >                        traceBuilderMaker(mbL),
  >                        swissTableR,
  >                        pseudoWhenGarbage)]
  # value: [[<capTPReceiver>, <capTPBuilderMaker>, <Far ref>], [<capTPReceiver>, <capTPBuilderMaker>, <Far ref>]]
  
--- 

  ? def leftObj {
  >   to ping() { println("pinged"); return "pong" }
  > }
  # value: <leftObj>

  ? def swissL :int := swissTableL.getNewSwiss(leftObj); null
  ? swissTableL.lookupSwiss(swissL) == leftObj
  # value: true

  ? interp.waitAtTop(def leftViaRight := rnlR <- lookupSwiss(swissL, null))
  # stdout: Left <- Deliver(-1, NewFarDesc(1, 1033912670282953026478972818820010722176128073325), 0, "lookupSwiss", [10000001, null])
  #         Left <- DeliverOnly(-1, "__whenMoreResolved", [NewFarDesc(2, 47255196895205160731987244561159478631887357377)])
  #         Right <- DeliverOnly(1, "run", [NewFarDesc(1, 382064925828890872342377433413917253333972024416)])
  #         Right <- DeliverOnly(2, "run", [ImportDesc(1)])
  #         
  
  ? leftViaRight
  # value: <Far ref>
  
  ? interp.waitAtTop(def r := leftViaRight <- ping())
  # stdout: Left <- Deliver(-2, NewFarDesc(3, 412897248500657771667886264468852369692723684603), 1, "ping", [])
  #         pinged
  #         Left <- DeliverOnly(-2, "__whenMoreResolved", [NewFarDesc(4, 82190111274176756684133692948252028599388244870)])
  #         Right <- DeliverOnly(3, "run", ["pong"])
  #         Right <- DeliverOnly(4, "run", ["pong"])
  #         

  ? r
  # value: "pong"