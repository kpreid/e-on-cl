# Copyright 2007 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

  ? def makeVine := <import:net.captp.tables.makeVine>; null
  ? def makeFlexMap := <elib:tables.makeFlexMap>; null
  ? def deSubgraphKit := <elib:serial.deSubgraphKit>; null
  ? def makeCycleBreaker := <elib:tables.makeCycleBreaker>; null
  ? def Throwable := <type:java.lang.Throwable>; null

In this file, we test the implementation of the CapTP operations and associated state.

  ? def makeCapTPConnection := <import:net.captp.comm.makeCapTPConnection>
  # value: <makeCapTPConnection>
  
  ? def makeSwissTable := <import:net.captp.tables.makeSwissTable>
  # value: <makeSwissTable>
  
  ? def nonceLocatorIndex := 0; null
  ? def nullSwissNumber := 0; null
  
Setting up half of a CapTP connection with mock authorities.
  
  ? def finalizers := [].asMap().diverge()
  > var fIndex := 0
  > def pseudoWhenGarbage(ref, reactor) {
  >   #traceln(`Adding finalizer for $ref -> $reactor`)
  >   finalizers[fIndex += 1] := [ref, reactor]
  > }
  > def clearFinalizers() { finalizers.removeAll() }
  > def runFinalizers() {
  >   for i => [_, reactor] in finalizers {
  >     #traceln(`Running $reactor`)
  >     reactor <- ()
  >     finalizers.removeKey(i)
  >   }
  > }
  > null
  
  ? def descs {
  >   match [v, a] { 
  >     def generic {
  >       to __printOn(out :TextWriter) { 
  >         out.print(v, "Desc")
  >         a.printOn("(", ", ", ")", out)
  >       }
  >       to __optUncall() { return [descs, v, a] }
  >     }
  >   }
  > }; null
  
  ? def [testGraphRecognizer, testBuilderMaker] := {
  >   def scope := deSubgraphKit.getDefaultScope() | [
  >     "CapTP_1_descs" => descs,
  >     => Ref,
  >     => <import>]
  >   [deSubgraphKit.makeRecognizer(null, makeCycleBreaker.byInverting(scope)),
  >    fn { deSubgraphKit.makeBuilder(scope) }]
  > }
  > def makeTestConnection() {
    
In order to make the test output deterministic, we use a fake RNG. Its output will mostly appear in these tests hashed:
  10000001.cryptoHash() == 382064925828890872342377433413917253333972024416
  10000002.cryptoHash() == 1033912670282953026478972818820010722176128073325
  10000003.cryptoHash() == 47255196895205160731987244561159478631887357377

  >   var i := 10000000
  >   def pseudoEntropy {
  >     to nextSwiss() { return (i += 1) }
  >   }
  >
  >   def swissTable := makeSwissTable(pseudoEntropy, makeFlexMap, makeFlexMap)
  >     
  >   def [r, makeIncomingBuilder, rnl] := makeCapTPConnection(
  >     def outgoing { match msg { println(msg) }},
  >     testBuilderMaker,
  >     swissTable,
  >     pseudoWhenGarbage)

buildIn takes an object in our test environment, containing objects made by 'descs' above, and transforms them as a CapTP wire protocol unserializer would.

  >   def buildIn(obj) {
  >     return testGraphRecognizer.recognize(obj, makeIncomingBuilder())
  >   }; null
  >   return [swissTable, r, rnl, buildIn]
  > }; null
  
  ? def [swissTable, receiver, remoteNonceLocator, buildIn] := makeTestConnection()
  # value: [<swissTable>, <capTPReceiver>, <Far ref>, <buildIn>]
  

--- Incoming DeliverOp ---

At this point, the only thing the remote side can possibly do is close the connection or talk to the NonceLocator, which is at the well-known position 0. We'll ask it for null, which has the well-known swiss number 0.

The index provided is negative because it is chosen by the remote side. <http://www.erights.org/elib/distrib/captp/4tables.html>

The 2-cycle delay on the redirector reports is because there is first a send of answer <- __whenMoreResolved(redirector) followed by the __whenMoreResolved's response send.


  ? receiver.Deliver(-1, 
  >                  fn r { println(`Redirector invoked: $r`) },
  >                  nonceLocatorIndex, 
  >                  "lookupSwiss",
  >                  [nullSwissNumber, makeVine("irrelevant")])
  ?
  # stdout: Redirector invoked: null
  #         

null should now be present in the connection's answers table at -1.

  ? receiver.Deliver(-2,
  >                  fn r { println(`Redirector invoked: $r`) },
  >                  -1,
  >                  "__getAllegedType",
  >                  [])
  ?
  # stdout: Redirector invoked: Null
  #         
  
  ? receiver.Deliver(-3,
  >                  fn r { println(`Redirector invoked: $r`) },
  >                  -2,
  >                  "getFQName",
  >                  [])
  ?
  # stdout: Redirector invoked: org.cubik.cle.prim.null
  #         

Positive/zero answer index is an error:

  ? receiver.Deliver(0, fn _ {}, -2, "getFQName", [])
  # problem: 0 is not in the region -2147483648..!0

  ? receiver.Deliver(1, fn _ {}, -2, "getFQName", [])
  # problem: 1 is not in the region -2147483648..!0

Missing recipient:

  ? receiver.Deliver(-1, fn _ {}, -999, "getFQName", [])
  # problem: 999 not alloced in AnswersTable__1

--- Incoming DeliverOnlyOp ---

2-cycle delay on this test because the reactor invocation is itself a send.

  ? receiver.DeliverOnly(-3,
  >                      "__whenMoreResolved",
  >                      [fn r { println(`WMR reactor invoked: $r` )}])
  ?
  # stdout: WMR reactor invoked: org.cubik.cle.prim.null
  #         

--- Incoming GCExportOp ---

To test GCExportOp, we must first export something.

  ? E.sendOnly(remoteNonceLocator, "exportTest", [def exported(x) {println(x)}])
  ?
  # stdout: ["DeliverOnly", [0, "exportTest", [NewFarDesc(1, 382064925828890872342377433413917253333972024416)]]]
  #         

wireDelta of 0 should have no effect.

  ? receiver.GCExport(1, 0)
  ? receiver.DeliverOnly(1, "run", ["still here"])
  # stdout: still here
  #         
  
wireDelta of 1 should delete the export.

  ? receiver.GCExport(1, 1)
  ? receiver.DeliverOnly(1, "run", ["gone"])
  # problem: 1 not alloced in ExportsTable__1

A reference is collected once the sum of wireDeltas in all received GCExport messages exceeds the number of times it is exported. Here's a multiple export:

  ? E.sendOnly(remoteNonceLocator, "exportTest2a", [exported])
  ?
  # stdout: ["DeliverOnly", [0, "exportTest2a", [NewFarDesc(1, 382064925828890872342377433413917253333972024416)]]]
  #         

(The NewFarDesc's index is the same because 1 is at the head of the exports table's free list, not because of any deliberate relationship.)

  ? E.sendOnly(remoteNonceLocator, "exportTest2b", [exported])
  > E.sendOnly(remoteNonceLocator, "exportTest2c", [exported])
  ?
  # stdout: ["DeliverOnly", [0, "exportTest2b", [ImportDesc(1)]]]
  #         ["DeliverOnly", [0, "exportTest2c", [ImportDesc(1)]]]
  #         

wireDelta of 1 should have no effect (export count now 2).

  ? receiver.GCExport(1, 1)
  ? receiver.DeliverOnly(1, "run", ["still here #2"])
  # stdout: still here #2
  #         
  
Additional wireDelta of 2 should balance the three previous references.

  ? receiver.GCExport(1, 2)
  ? receiver.DeliverOnly(1, "run", ["gone #2"])
  # problem: 1 not alloced in ExportsTable__1


--- Incoming GCAnswerOp ---

Dropping the entry containing the FQN of null.

  ? receiver.GCAnswer(-3)
  ? receiver.DeliverOnly(-3,
  >                      "__whenMoreResolved",
  >                      [fn r { println(`WMR reactor invoked: $r` )}])
  # problem: 3 not alloced in AnswersTable__1

--- Incoming ShutdownOp ---

XXX do this (shut down connection iff no more messages than the specified count have been sent by the recipient). Must not be visible to code. Note that 

(IRC log from July 28, 2007)
<markmiller> The funny case is messages to be sent to zero when a shutdown might happen
<markmiller> These need to be buffered, so that if a shutdown does happen, that can be resent transparently on a newly formed connection.
<kpreid> ow
<markmiller> This is much of why it was never fully implemented.
<kpreid> whereas in the current impls, it's essentially a connection-specific always-live-ref, yes?
<markmiller> GCing connections seems to be hard
<markmiller> yes

--- Incoming TerminatedOp ---

  ? def [_, ttReceiver, ttRemoteNonceLocator, ttBuildIn] := makeTestConnection(); null

There are several cases to check the behavior of:

Imported far ref:
  
  ? def outgoingFar := ttRemoteNonceLocator <- getTerminatedTestRef1()
  # value: <Promise>
  
  ?
  # stdout: ["Deliver", [-1, NewFarDesc(1, 382064925828890872342377433413917253333972024416), 0, "getTerminatedTestRef1", []]]
  #         
  
  ? ttReceiver.DeliverOnly(1, "run", ttBuildIn([descs.NewFar(1, 1234)]))

Question (promise resulting from DeliverOp):

  ? def outgoingQuestion := ttRemoteNonceLocator <- getTerminatedTestRef2()
  # value: <Promise>
  
  ?
  # stdout: ["Deliver", [-2, NewFarDesc(2, 1033912670282953026478972818820010722176128073325), 0, "getTerminatedTestRef2", []]]
  #         
  
Imported remote promise:

  XXX write test once importing remote promises works
  
Export, which should receive a __reactToLostClient:

  ? E.sendOnly(ttRemoteNonceLocator, "TerminatedExportTest", [
  >   def ttReactReceiver {to __reactToLostClient(p) { print(`rTLC expecter got $p`) }}])
  ?
  # stdout: ["DeliverOnly", [0, "TerminatedExportTest", [NewFarDesc(3, 47255196895205160731987244561159478631887357377)]]]
  #         

The termination:

  ? ttReceiver.Terminated("foo" :Throwable)
  # stdout: rTLC expecter got problem: foo

Consequences:

  ? [outgoingFar, outgoingQuestion, ttRemoteNonceLocator]
  # value: [<ref broken by problem: foo>, <ref broken by problem: foo>, <ref broken by problem: foo>]
  
  ? Ref.optProblem(outgoingFar) == Ref.optProblem(outgoingQuestion)
  # value: true

Checking for robust termination:

We don't need to test anything but the receiver and builder-maker, because every other access is an eventual ref that gets broken, as tested above.

  ? ttReceiver.DeliverOnly(0, "", [])
  # problem: this CapTP connection has been terminated (problem: foo)

  ? ttReceiver.Deliver(-1, null, 0, "", [])
  # problem: this CapTP connection has been terminated (problem: foo)

  ? ttReceiver.GCAnswer(-1)
  # problem: this CapTP connection has been terminated (problem: foo)

  ? ttReceiver.GCExport(1, 0)
  # problem: this CapTP connection has been terminated (problem: foo)

  x ? ttReceiver.Shutdown(0)
  x # problem: this CapTP connection has been terminated (problem: foo)

  ? ttReceiver.Terminated("bar")
  # problem: this CapTP connection has been terminated (problem: foo)

  x ? ttReceiver.Wormhole(-1, null, 0, "", [])
  x # problem: this CapTP connection has been terminated (problem: foo)

  ? ttBuildIn(descs.Incoming(0))
  # problem: this CapTP connection has been terminated (problem: foo)

XXX test operations on builders gotten from the maker before the termination

--- Incoming WormholeOp ---

XXX we don't have VatID processing yet

------ Incoming descriptors ------

--- Incoming NewFarDesc ---

  ? receiver.DeliverOnly(0, "__whenMoreResolved", def nfdL := buildIn([descs.NewFar(1, 13904808385)]))
  ?
  # stdout: ["DeliverOnly", [1, "run", [ImportDesc(0)]]]
  #         

--- Incoming NewRemotePromiseDesc ---

First we set up an incoming reference to an object to catch the remote promise.

  ? clearFinalizers()
  > def remotePromise
  > def promiseReceiver(p) {
  >   println(`got $p`)
  >   bind remotePromise := p
  > }
  > def swiss :int := swissTable.getNewSwiss(promiseReceiver); null
  > receiver.Deliver(-3, buildIn(descs.NewFar(2, 928)), 0, "lookupSwiss", [swiss, null])
  > receiver.GCAnswer(-3)
  ?
  # stdout: ["DeliverOnly", [2, "run", [NewFarDesc(1, 1033912670282953026478972818820010722176128073325)]]]
  #         

Then we deliver a message containing the promise.

  ? receiver.DeliverOnly(1, "run", buildIn([descs.NewRemotePromise(3, -4, def remotePromiseRdrBase := 4290823709)]))
  > receiver.GCExport(1, 1)
  # stdout: got <Promise>
  #         

Testing sends to the promise:

  ? E.sendOnly(remotePromise, "hello eventual", [])
  ?
  # stdout: ["DeliverOnly", [3, "hello eventual", []]]
  #         

The redirector should be accessible by our provided SwissBase:

  ? receiver.Deliver(-3, buildIn(descs.Import(2)), 0, "lookupSwiss", [remotePromiseRdrBase.cryptoHash(), null])
  ?
  # stdout: ["DeliverOnly", [2, "run", [NewFarDesc(1, 216307466466887903142951307717254789854244528344)]]]
  #         

(remotePromiseRdrBase.cryptoHash().cryptoHash() == 216307466466887903142951307717254789854244528344)

Invoking the redirector causes the remote promise to resolve:

  ? receiver.DeliverOnly(-4, "run", [56])
  ? remotePromise
  # value: 56
  
The remote promise proxy is now garbage, so CapTP should send GCExportOp:

  ? runFinalizers()
  ?
  # stdout: ["GCExport", [3, 1]]
  #         ["GCExport", [2, 2]]
  #         

Index 3 is the remote promise, and index 2 is the twice-used fake redirector for incoming deliveries.

Export index 2 now holds the redirector.

Cleaning up:

  ? receiver.GCExport(1, 1) # the redirector retrieved by lookupSwiss
  > receiver.GCAnswer(-3) # the answer index of the lookupSwiss response
  > receiver.GCAnswer(-4) # the answer index of the redirector 

  XXX further tests

--- Incoming ImportDesc ---

This test depends on the above NewFarDesc test having allocated index 1.

  ? buildIn([descs.Import(1)])
  # value: [<Far ref>]
  
  ? buildIn([descs.Import(1)]) == nfdL
  # value: true

  ? buildIn([descs.Import(999)])
  # problem: 999 not alloced in ProxiesTable__1

An ImportDesc cannot have a negative index (receiver's questions table) because that would conflict with the receiver being able to GC its questions table entries.

--- Incoming IncomingDesc ---

Restore the FQN-of-null answer entry for testing:

  ? receiver.Deliver(-3, fn r {}, -2, "getFQName", [])

  ? receiver.Deliver(-4, println, -3, "add", buildIn([descs.Incoming(-3)]) )
  ?
  # stdout: org.cubik.cle.prim.nullorg.cubik.cle.prim.null
  #         

--- Incoming Promise3Desc ---

XXX

--- Incoming Far3Desc ---

XXX

--- Incoming LocatorUnumDesc ---

XXX

------ Outgoing operations ------

--- Outgoing DeliverOnlyOp ---
XXX write this

--- Outgoing DeliverOp ---

  ? def outgoingFar := remoteNonceLocator <- lookupSwiss(12345, null)
  # value: <Promise>
  ?
  # stdout: ["Deliver", [-1, NewFarDesc(1, 47255196895205160731987244561159478631887357377), 0, "lookupSwiss", [12345, null]]]
  #         

The above is a delivery to the NonceLocator, which is a bit of an unusual case; so we will also test a Far ref.

The remote side invokes the redirector for 'r', resolving it to a Far ref with import index 1.

  ? receiver.DeliverOnly(1, "run", buildIn([descs.NewFar(1, 2398478938902)]))
  ? outgoingFar
  # value: <Far ref>

Here's a normal message to that Far ref.

  ? outgoingFar <- foo()
  # value: <Promise>
  ? 
  # stdout: ["Deliver", [-2, NewFarDesc(2, 412897248500657771667886264468852369692723684603), 1, "foo", []]]
  #         


--- Outgoing GCExportOp ---

GCExportOp is sent when a proxy for an import-table entry has gone away; so to test it, we simulate an arriving import which is discarded.

  ? clearFinalizers()
  > receiver.DeliverOnly(0, "__optSealedDispatch", buildIn([descs.NewFar(2, 38249328)]))
  ? runFinalizers()
  ?
  # stdout: ["GCExport", [2, 1]]
  #         

Note that the sender of GCExportOp does not know whether the index was actually freed by the remote side; if it was, the index will be overwritten by a New*Desc; otherwise, an ImportDesc will arrive causing the creation of a new proxy for the existing table entry.

  ? clearFinalizers()
  > receiver.DeliverOnly(0, "__optSealedDispatch", buildIn([descs.NewFar(2, 38249328)]))
  > receiver.DeliverOnly(0, "__optSealedDispatch", buildIn([descs.Import(2)]))
  ? runFinalizers()
  ?
  # stdout: ["GCExport", [2, 2]]
  #         


--- Outgoing GCAnswerOp ---

We create a remote promise for an answer and tell the connection that it has been GCed.

  ? clearFinalizers()
  > E.send(remoteNonceLocator, "lookupSwiss", [93478934, null])
  > null
  ?
  # stdout: ["Deliver", [-3, NewFarDesc(3, 82190111274176756684133692948252028599388244870), 0, "lookupSwiss", [93478934, null]]]
  #         
  
  ? runFinalizers()
  ?
  # stdout: ["GCAnswer", [-3]]
  #

After GC, the question table entry is free and will be reused.

  ? E.send(remoteNonceLocator, "lookupSwiss", [23948931413532, null])
  > null
  ?
  # stdout: ["Deliver", [-3, NewFarDesc(4, 682009956380579499771617381148460370106090083063), 0, "lookupSwiss", [23948931413532, null]]]
  #         
  
  ? runFinalizers()
  ?
  # stdout: ["GCAnswer", [-3]]
  #


--- Outgoing ShutdownOp ---
XXX write this
--- Outgoing TerminatedOp ---
XXX write this
--- Outgoing WormholeOp ---
XXX write this

------ Outgoing descriptors ------

--- Outgoing NewFarDesc ---

  ? E.sendOnly(outgoingFar, "newFarDescTest", [def newSelfish {}])
  ?
  # stdout: ["DeliverOnly", [1, "newFarDescTest", [NewFarDesc(5, 1194597571256310373217679255844280815354866957945)]]]
  #         

After an outgoing NewFarDesc, the object should be present in the exports table, so further outgoing messages use ImportDesc:

  ? E.sendOnly(outgoingFar, "sameFarTest", [newSelfish])
  ?
  # stdout: ["DeliverOnly", [1, "sameFarTest", [ImportDesc(5)]]]
  #         

--- Outgoing NewRemotePromiseDesc ---

  ? def exportedPromise
  > E.sendOnly(outgoingFar, "newRemotePromiseDescTest", [exportedPromise])
  ?
  # stdout: ["DeliverOnly", [1, "newRemotePromiseDescTest", [NewRemotePromiseDesc(6, -3, 10000008)]]]
  #         
  
  ? bind exportedPromise := 1; null
  ?
  # stdout: ["DeliverOnly", [-3, "run", [1]]]
  #         

(Yes, it is correct that the third argument isn't a hash. It's direct from entropy.nextSwiss(), and is a SwissBase, the authority to *be* an object (as seen from outside some vat).)

XXX test properties of the identity of the redirector passed to exportedPromise <- __whenMoreResolved, and that if re-imported it is still good

--- Outgoing ImportDesc ---

See NewFarDesc above for testing of ordinary imports; this is the special NonceLocator case.

  XXX write this test

--- Outgoing IncomingDesc ---

  ? E.sendOnly(outgoingFar, "nonceLocatorSendIncomingTest", [remoteNonceLocator])
  ?
  # stdout: ["DeliverOnly", [1, "nonceLocatorSendIncomingTest", [IncomingDesc(0)]]]
  #         
  
  ? E.sendOnly(outgoingFar, "farSendIncomingTest", [outgoingFar])
  ?
  # stdout: ["DeliverOnly", [1, "farSendIncomingTest", [IncomingDesc(1)]]]
  #         

--- Outgoing Promise3Desc ---
XXX
--- Outgoing Far3Desc ---
XXX
--- Outgoing LocatorUnumDesc ---
XXX

------ Serialization ------

  ? E.sendOnly(outgoingFar, "setupIncoming", [println])
  ?
  # stdout: ["DeliverOnly", [1, "setupIncoming", [NewFarDesc(7, 676259857959289598128720760374698425339633638932)]]]
  #         

--- Disconnected ref ---

  ? E.sendOnly(outgoingFar, "s", [Ref.broken("b")])
  ?
  # stdout: ["DeliverOnly", [1, "s", [<ref broken by problem: b>]]]
  #         

  ? receiver.DeliverOnly(7, "run", buildIn([Ref.broken("b")]))
  # stdout: <ref broken by problem: b>
  #         

XXX write more serialization tests

------ Other ------

--- remoteNonceLocator ref ---

  ? E.sendOnly(remoteNonceLocator, "foo", [])
  ?
  # stdout: ["DeliverOnly", [0, "foo", []]]
  #         
