# Copyright 2005-2007 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

  ? pragma.enable("dot-props")
  > def ALL := EIO::ALL
  > null

  ? def mapStream :DeepFrozen := <import:org.cubik.cle.io.mapStream>
  # value: <mapStream>
  
  ? def s := mapStream(List, [1, 2, 3].asStream(), __makeList)
  # value: <-<makeConstList>-[1, 2, 3].asStream()
  
  ? s.getChunkType()
  # value: List[List]
  
  ? EIO.takeAll(s)
  # value: [[1], [2], [3]]
  
  ? pragma.enable("accumulator")
  > def s := mapStream.chunked(List[int], 
  >                            [1, 2, 3].asStream(), 
  >                            def chunkFunc(es) :any {
  >                              return accum [] for x in es { _.with(x+1) }})
  # value: <-<chunkFunc>-[1, 2, 3].asStream()
  
  ? EIO.takeAll(s)
  # value: [2, 3, 4]

Closure

  ? def [bo, bi] := EIO.pipe([].asMap())
  > def bm := mapStream(any, bi, __makeList)
  > bo.reserve() <- resolve(null)
  > interp.waitAtTop(def r := bm.takeAtMost(1))
  ? [r]
  # value: [null]

XXX closing map stream propagates