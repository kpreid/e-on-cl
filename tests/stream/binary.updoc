# Copyright 2007 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

  ? pragma.syntax("0.9")

Utilities for reading and writing binary representations on streams. 

Note that there is currently an 8-bits-per-byte assumption baked in, but this WILL CHANGE, as will the assumption that the stream is immediately readable/writable.

Also, the chosen names for these binary types are not perfect, and suggestions for improving them are welcome.

  ? def <bin> := <import:org.cubik.cle.binary.*>
  # value: <import:org.cubik.cle.binary.*>
  
  ? def stdoutS := <import:org.cubik.cle.io.makeWriterStream>(List[0..255], E.call, def testW {
  >   to write(chunk :List) {
  >     chunk.printOn("", " ", "", stdout)
  >     if (chunk.size().aboveZero()) { stdout.print(" ") }
  >   }
  >   to close() { stdout.print("<close>") }
  >   to flush() {}
  >   to fail(p) { stdout.print(p) }
  > }); null

UnsignedInteger

  ? def UnsignedInteger :DeepFrozen := <bin:UnsignedInteger>
  # value: <UnsignedInteger>
  
  ? def take := UnsignedInteger[8].takingFrom([1, 250].asStream())
  # value: <taker>
  
  ? take()
  # value: 1
  
  ? take()
  # value: 250
  
  ? def take := UnsignedInteger[16].takingFrom([2, 5, 0, 10].asStream())
  # value: <taker>
  
  ? take()
  # value: 517
  
  ? take()
  # value: 10
  
  ? def write := UnsignedInteger[8].writingTo(stdoutS)
  # value: <writer>

  ? write(10)
  # stdout: 10 
  
  ? def write := UnsignedInteger[16].writingTo(stdoutS)
  # value: <writer>

  ? write(10)
  # stdout: 0 10 
  
  ? write(517)
  # stdout: 2 5 

SignedInteger

  ? def SignedInteger :DeepFrozen := <bin:SignedInteger>
  # value: <SignedInteger>

  ? def take := SignedInteger[8].takingFrom([1, 250].asStream())
  # value: <taker>

  ? take()
  # value: 1

  ? take()
  # value: -6

  ? def take := SignedInteger[16].takingFrom([10, 5, 255, 10].asStream())
  # value: <taker>

  ? take()
  # value: 2565

  ? take()
  # value: -246

  ? def write := SignedInteger[8].writingTo(stdoutS)
  # value: <writer>

  ? write(10)
  # stdout: 10 

  ? write(-10)
  # stdout: 246 

  ? def write := SignedInteger[16].writingTo(stdoutS)
  # value: <writer>

  ? write(10)
  # stdout: 0 10 

  ? write(-246)
  # stdout: 255 10 
  
XXX test consequences if bit size isn't a multiple of stream byte size

WholeNum

  ? def WholeNum :DeepFrozen := <bin:WholeNum>
  # value: <WholeNum>
  
  ? def take := WholeNum.takingFrom(def s := [0, 127, 130, 1, 99].asStream())
  # value: <takeWholeNum>
  
  ? take()
  # value: 0
  
  ? take()
  # value: 127
  
  ? take()
  # value: 257
  
  ? s
  # value: [99].asStream()
  
  ? def write := WholeNum.writingTo(stdoutS)
  # value: <writeWholeNum>

  ? write(10)
  # stdout: 10 
  
  ? write(128)
  # stdout: 129 0 
  
UTF8StringWithLength16

  ? def UTF8StringWithLength16 :DeepFrozen := <bin:UTF8StringWithLength16>
  # value: <UTF8StringWithLength16>

  ? def take := UTF8StringWithLength16.takingFrom(def s := [
  >   0, 0,
  >   0, 2, 32, 33,
  >   0, 3, 226, 128, 162,
  >   226, 128, 162,
  > ].asStream())
  # value: <taker>
  
  ? take()
  # value: ""
  
  ? take()
  # value: " !"
  
  ? take()
  # value: "â€¢"
  
  ? s
  # value: [226, 128, 162].asStream()
  
  ? def write := UTF8StringWithLength16.writingTo(stdoutS)
  # value: <writer>

  ? write("")
  # stdout: 0 0 
  
  ? write("ab")
  # stdout: 0 2 97 98 

  ? write("\u2022")
  # stdout: 0 3 226 128 162 

Float64

  ? def Float64 :DeepFrozen := <bin:Float64>
  # value: <Float64>

  XXX not actually implemented yet

Character32

  ? def Character32 :DeepFrozen := <bin:Character32>
  # value: <Character32>

  XXX not actually implemented yet

DataEBuild

  ? def DataEBuild :DeepFrozen := <bin:DataEBuild>
  # value: <DataEBuild>
  
  ? def take := DataEBuild.takingFrom(def s := [2, 99, 1, 45].asStream())
  # value: <taker>
  
  ? def rc := take()
  # value: <_>
  
  ? s
  # value: [45].asStream()
  
  ? rc((def deSubgraphKit := <elib:serial.deSubgraphKit>).makeBuilder())
  # value: 99
  
  ? rc(deSubgraphKit.makeBuilder())
  # value: 99
  
  ? def write := DataEBuild.writingTo(stdoutS)
  # value: <writer>
  
  ? def b; write(def extentRC(bind b) { return b.buildRoot(b.buildLiteral(99)) })
  # stdout: 2 99 1 

(testing output and also the effects of calling the builder late)

  ? b.buildLiteral(98)
  # problem: builder for <extentRC> past its dynamic extent

XXX eventual operations
XXX byte-width options
XXX consequences of hitting EOF in the middle of a read
XXX better printOns for writers and takers