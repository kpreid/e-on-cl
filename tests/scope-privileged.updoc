# Copyright 2005-2006 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

privilegedScope

  ? privilegedScope["println"]
  # value: <println>

<unsafe>

  ? <unsafe>
  # value: <unsafe:*>
  
  ? <unsafe:org.example.nonexistent>
  # problem: <unsafe:*> can't find "org.example.nonexistent"

DeepFrozenStamp
  
  ? DeepFrozenStamp
  # value: <DeepFrozenStamp>
  
  ? DeepFrozenStamp :DeepFrozen
  # value: <DeepFrozenStamp>
  
SelflessStamp

  ? SelflessStamp
  # value: <SelflessStamp>

  ? def makeCell(arg) :any { 
  >   return def cell implements SelflessStamp {
  >     to __optUncall() :any { return [makeCell, "run", [arg]] }
  >     to run() :any { return arg }
  >   }
  > }
  # value: <makeCell>
  
  ? def ss_a := makeCell("a")
  # value: <cell>

  ? def ss_aa := makeCell("a")
  # value: <cell>
  
  ? ss_a == ss_aa
  # value: true
  
  ? ss_a == makeCell("b")
  # value: false

 Check that Equalizer can handle recursive == due to uncall properly
 
  ? def makeCell2(option) :any { 
  >   def value := option.pick(1, 0)
  >   return def cell implements SelflessStamp {
  >     to __optUncall() :any { return [makeCell2, "run", [value == 1]] }
  >     to run() :any { return value }
  >   }
  > }
  # value: <makeCell2>

  ? makeCell2(true) == makeCell2(true)
  # value: true

  ? makeCell2(true) == makeCell2(false)
  # value: false

interp

  x ? interp
  x # value: <updocInterp>
  
  XXX more specific tests
  ? interp.getProps() :Map; null

  XXX more tests for interp
    to addStatusReactor(_ :any) :any
    to blockAtTop() :any
    to continueAtTop() :any
    to enqueue(_ :any) :any
    to exitAtTop() :any
    to exitAtTop(_ :any) :any
    to gc() :any
    to getArgs() :any
    to getExpand() :any
    to getFinalExitStatusVow() :any
    to getInteractive() :any
    to getNextExitStatus() :any
    to getPrintFunc() :any
    to getProps() :any
    to getResult(_ :any) :any
    to getShowEStack() :any
    to getShowJStack() :any
    to getShowTransformed() :any
    to getTopScope() :any
    to pushResult(_ :any) :any
    to setExpand(_ :any) :any
    to setPrintFunc(_ :any) :any
    to setShowEStack(_ :any) :any
    to setShowJStack(_ :any) :any
    to setShowTransformed(_ :any) :any
    to setTopScope(_ :any) :any
    to waitAtTop(_ :any) :any

rune

  ? rune; null
  x # value: <rune>
  
