# Copyright 2005-2007 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")

def primParser := <import:org.cubik.cle.prim.parser>
def convertQuasiInput := <import:org.cubik.cle.convertQuasiInput>

def makeEParser implements DeepFrozen {
  to __printOn(out :TextWriter) {
    out.print("<import:org.erights.e.elang.syntax.makeEParser>")
  }

  to valueMaker(quasi1Source) {
    def [quasi2Source, valueHoles, patternHoles] := convertQuasiInput.inlineHoles_to_holeCharacterIndexes(quasi1Source)
    return primParser.run(quasi2Source, [valueHoles, patternHoles], null)
  }

  to matchMaker(quasi1Source) {
    def [quasi2Source, valueHoles, patternHoles] := convertQuasiInput.inlineHoles_to_holeCharacterIndexes(quasi1Source)
    return primParser.run(quasi2Source, [valueHoles, patternHoles], null)
  }

  to run(source) {
    return primParser(source)
  }
  
  /** no tests yet */
  to make(optProps :nullOk[Map[String, String]], 
          lexer :any, # LexerFace?
          warnout :TextWriter,
          debugFlag :boolean,
          onlyOneExprFlag :boolean) {
          
    var done := false
    var props := if (optProps == null) { [].asMap() } else { optProps }
    
    def eParser {
      to isEndOfFile() {
        return done
      }
      to parse() {
        # XXX thoroughly broken - ignores parameters, etc.
        done := true
        def [node, newProps] := primParser.parseWithProps(lexer.getFeeder()._readText(), props, null, throw)
        props := newProps
        return node
      }
      to setSource(source :Twine) {
        lexer.setSource(source)
      }
    }
    return eParser
  }
  
  /** Reports the problem via 'ejector' if the parse fails.
    * 
    * XXX To be renamed once we have a uniform and compatible naming scheme for EParser methods. */
  to xTryParse(source :Twine, ejector) :any {
    return primParser(source, null, ejector)
  }
}
