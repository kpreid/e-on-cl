# Copyright 2005-2006 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")

#def EventuallyDeepFrozen := DeepFrozen."eventually"()

def makePackageLoader implements DeepFrozen {
  to run(loader, scheme, packageFQN) {
    def fqnPrefix := packageFQN(0, packageFQN.size() - 1)
    
    def packageLoader { # implements EventuallyDeepFrozen extends makeBaseLoader(...)
      #method __optSealedDispatch(brand) :any {
      #  if (brand == EventuallyDeepFrozen.getPeekBrand()) {
      #    EventuallyDeepFrozen.getPeekSealer().seal(meta.getState())
      #  }
      #}
      
      to __printOn(out :TextWriter) {
        out.write("<")
        out.print(scheme)
        out.print(fqnPrefix + "*")
        out.write(">")
     }
      
      to get(name) {
        return loader[fqnPrefix + name]
      }
    }
    
    return packageLoader
  }
}