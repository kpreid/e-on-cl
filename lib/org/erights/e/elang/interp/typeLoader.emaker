# Copyright 2005-2006 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.enable("easy-return")
pragma.disable("explicit-result-guard")

def insertNamePrefix(fqn, insertion) {
  def lastDotPos := fqn.lastIndexOf1('.')
  return \
    if (lastDotPos == -1) {
      insertion + fqn
    } else {
      def after := lastDotPos + 1
      fqn(0, after) + insertion + fqn(after)
    }
}

/** Compatibility. <type:a.b.C> => <import:a.b.type.C> OR <import:a.b.makeC>.asType(), whichever exists */
def typeLoader { # XXX implements DeepFrozen once import__uriGetter is DeepFrozen
  to __printOn(out :TextWriter) {
    out.print("<type:*>")
  }

  to get(fqn :String) :any {
    escape notTypeEmaker {
      return <import>.fetch(insertNamePrefix(fqn, "type."), notTypeEmaker)
    }
  
    def maker := <import>.fetch(
                   insertNamePrefix(fqn, "make"),
                   thunk { 
                     throw(`no type object found for $fqn`)
                   })
    try {                  
      return maker.asType()
    } catch p {
      traceln(`type-loader: maker $maker for fqn $fqn exists but .asType() failed`)
      throw(p)
    }
  }
  
  /** Always returns null. 
  
      Use <import>.optUncall instead. */
  to optUncall(specimen) {}
}
