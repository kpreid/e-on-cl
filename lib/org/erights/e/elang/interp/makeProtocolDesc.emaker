# Translated to E by Kevin Reid from Java source which is:
# Copyright 2002 Combex, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ...............

pragma.syntax("0.9")

def simplifyFQName := <import:org.cubik.cle.prim.simplifyFQName>
def makeTypeDesc := <import:org.erights.e.elib.base.makeTypeDesc>

def EventuallyDeepFrozen := DeepFrozen."eventually"()

/**
 * A type description object, as would be created by an <tt>interface</tt>
 * expression.
 * <p>
 * A type so defined is used both as an auditor, to check type conformance,
 * and as a Guard to check that the value provided is an instance of an audited
 * type.
 */
def makeProtocolDesc implements DeepFrozen, ExitViaHere {
  /**
   * Makes a single type description object that can be used both as a
   * rubber-stamping auditor and as a guard.
   * <p>
   * This can be used for the object-equivalent of single-key
   * authentication.
   */
  to run(docComment :nullOk[String],
         optFQName  :nullOk[String],
         supers     :List,   # XXX of what?
         auditors   :List,   # XXX [Auditor] but we don't have that yet
         mTypes     :List) { # XXX of MessageDesc

    def fqName := if (optFQName == null) { "_" } else { optFQName }
                  

    def protocolDesc extends makeTypeDesc(docComment, optFQName, supers, auditors, mTypes) implements EventuallyDeepFrozen {
      method __optSealedDispatch(brand) :any {
        if (brand == EventuallyDeepFrozen.getPeekBrand()) {
          EventuallyDeepFrozen.getPeekSealer().seal(meta.getState())
        }
      }
    
      to audit(_) {
        return true
      }
    
      to __printOn(out :TextWriter) {
        if (optFQName != null) {
          out.print("<" + simplifyFQName(optFQName) + " advisory guard/stamp>")
        } else {
          out.print("<Anonymous advisory guard/stamp>")
        }
      }
      
      to getFQName() { 
        return fqName
      }
      
      to coerce(specimen, optEjector) {
        if (__auditedBy(protocolDesc, specimen)) {
          return specimen
        } else {
          # Yes, this reveals our stamp. See http://www.eros-os.org/pipermail/e-lang/2005-May/010607.html
          def conformed := specimen.__conformTo(protocolDesc)
          if (__auditedBy(protocolDesc, conformed)) {
            return conformed
          } else {
            throw.eject(optEjector, "Not stamped by " + E.toQuote(protocolDesc))
          }
        }
      }
    }
    return protocolDesc
  }
  
  # XXX see notes on more specific types above
  # XXX write independent tests for makePair
  to makePair(docComment :nullOk[String], optFQName :nullOk[String], supers :List, auditors :List, mTypes :List) {
    # XXX methods
    def stamp
    def guard extends makeTypeDesc(docComment, optFQName, supers, auditors, mTypes) implements EventuallyDeepFrozen {
      method __optSealedDispatch(brand) :any {
        if (brand == EventuallyDeepFrozen.getPeekBrand()) {
          EventuallyDeepFrozen.getPeekSealer().seal(meta.getState())
        }
      }
    
      to __printOn(out :TextWriter) {
        if (optFQName != null) {
          out.print(simplifyFQName(optFQName))
        } else {
          out.print("<Anonymous ProtocolDesc>")
        }
      }
      
      to coerce(specimen, optEjector) {
        if (__auditedBy(stamp, specimen)) {
          return specimen
        } else {
          def conformed := specimen.__conformTo(guard)
          if (__auditedBy(stamp, conformed)) {
            return conformed
          } else {
            throw.eject(optEjector, "Not stamped by " + optFQName)
          }
        }
      }
    }
    
    bind stamp implements EventuallyDeepFrozen {
      method __optSealedDispatch(brand) :any {
        if (brand == EventuallyDeepFrozen.getPeekBrand()) {
          EventuallyDeepFrozen.getPeekSealer().seal(meta.getState())
        }
      }
    
      to __printOn(out :TextWriter) {
        out.write("<")
        out.print(guard)
        out.write(" stamp>")
      }
      
      /** Rubber-stamping auditor - accepts anything. */
      to audit(_) { return true }
    }

    return [guard, stamp]
  }
}

# print test

  ? interface G guards S {}
  # value: G
