# Copyright 2005-2006 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.enable("easy-return")
pragma.disable("explicit-result-guard")

def EventuallyDeepFrozen := DeepFrozen."eventually"()

def makeENodeCopyVisitor := <elang:visitors.makeENodeCopyVisitor>

def makeQuasiSubstituteVisitor implements DeepFrozen {
  to run(args) {
    def substituteVisitor extends makeENodeCopyVisitor(substituteVisitor) \
                          implements EventuallyDeepFrozen {
      method __optSealedDispatch(brand) :any {
        if (brand == EventuallyDeepFrozen.getPeekBrand()) {
          EventuallyDeepFrozen.getPeekSealer().seal(meta.getState())
        }
      }

     to visitQuasiLiteralNode(optOriginal, index) {
        return args[index]
      }
      to visitQuasiLiteralExpr(optOriginal, index) {
        return args[index]
      }
      to visitQuasiLiteralPatt(optOriginal, index) {
        return args[index]
      }
      to visitQuasiPatternNode(optOriginal, index) {
        throw("found quasi-pattern node $optOriginal in quasi-literal tree")
      }
      to visitQuasiPatternExpr(optOriginal, index) {
        throw("found quasi-pattern node $optOriginal in quasi-literal tree")
      }
      to visitQuasiPatternPatt(optOriginal, index) {
        throw("found quasi-pattern node $optOriginal in quasi-literal tree")
      }
    }
  
    return substituteVisitor
  }
}