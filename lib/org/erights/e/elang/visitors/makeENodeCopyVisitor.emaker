# Copyright 2005-2007 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")
pragma.enable("accumulator")

def root := <import:org.cubik.cle.root>

def makeENodeCopyVisitor implements DeepFrozen, ExitViaHere { # XXX write tests and documentation for this
  to run(self) {
    def eNodeCopyVisitor extends root[self] {
      to run(node) {
        return switch (node) {
          match list :List {
            accum [] for x in list { _.with(self.run(x)) }
          }
          match ==null { null }
          match _ {
            node.welcome(self)
          }
        }
      }
    
      match [`visit@_`, [optOriginal :notNull] + args] {
        def maker := optOriginal.__optUncall()[0]
        
        def subnodeFlags := maker.getParameterSubnodeFlags()
        
        def left := [if (optOriginal != null) {optOriginal.getOptSpan()}]
        # xxx preserve scope layout arg, if it ever becomes real
        def right := [null]
        
        E.call(maker, "run",
          accum left for i => arg in args { _.with(
            if (subnodeFlags[i]) {
              self.run(arg)
            } else {
              arg
            }
          )} + right
        )
      }
    }
    return eNodeCopyVisitor
  }
}