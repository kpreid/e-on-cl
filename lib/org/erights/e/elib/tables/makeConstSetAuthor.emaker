# Copyright 2005-2007 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")

def setSugar := <import:org.erights.e.elib.tables.setSugar>

def makeConstSetAuthor(TransparentStamp) {
  def ConstSetStamp as DeepFrozen { 
    to audit(_) { return true }
  }
  
  interface ConstSetGuard :DeepFrozen guards ConstSetGuardStamp :DeepFrozen extends Guard {}
  
  def ConstSet as DeepFrozen implements ConstSetGuardStamp {
    # XXX should reuse standard-coerce from the Lisp side
    to coerce(specimen, optEjector) {
      if (__auditedBy(ConstSetStamp, specimen)) {
        return specimen
      } else {
        def coerced := specimen.__conformTo(ConstSet)
        if (__auditedBy(ConstSetStamp, coerced)) {
          return coerced
        } else {
          # xxx exception type?
          throw.eject(optEjector, "not a ConstSet: " + E.toQuote(specimen))
        }
      }
    }
    
    to getValueGuard() { return any }
    
    to get(valueGuard) {
      return def ParamConstSet implements ConstSetGuardStamp {
        to __printOn(out :TextWriter) {
          out.quote(ConstSet)
          out.print("[")
          out.quote(valueGuard)
          out.print("]")
        }
        
        # XXX To be implemented
        # to coerce(specimen, ejector) {
        #   def ofKind :ConstSet exit ejector := specimen
        #   
        # }
        to getValueGuard() { return valueGuard }
      }
    }

    to "match__get/1"(specimen, ejector) {
      def ofKind := ConstSetGuard.coerce(specimen, ejector)
      return [ofKind.getValueGuard()]
    }
  }
  
  def makeConstSet
  
  /** unsafe maker which doesn't peek at its contents so we can e.g. preserve with-laziness */
  def unsafeMakeConstSet(itemMap) {
    return def constSet implements ConstSetStamp, Selfless, TransparentStamp {
      to __printOn(tw :TextWriter) {
        tw.quote(itemMap.getKeys())
        tw.print(".asSet()")
      }
      
      to __optUncall() {
        return [itemMap.getKeys(), "asSet", []]
      }
      
      /** Return the number of elements in this set. */
      to size() { return itemMap.size() }
      /** Return the elements in this set as a ConstList. */
      to getElements() { return itemMap.getKeys() }
      /** Return 'any', since element type restrictions are not part of our visible state. */
      to elementType() { return any }
      
      # Idea:
      # /** Coerce all elements of this set by the given guard and return a new set. May be optimized for sets already known to be of primitive types. */
      # To actually provide this we'd have to define what happens if the guard returns the same result for several elements.
      # to coerceElements(guard, optEjector)

      /** Return whether this set contains the given element. */
      to contains(element) :boolean { return itemMap.maps(element) }

      /** Return self, since this is already an immutable set. */
      to snapshot() { return constSet }
      /** Return self, since this is already an immutable set. */
      to readOnly() { return constSet }

      /** Return a new set with the element added if it is not already present. */
      to with(element) {
        # NOTE: I had to remove the "return original set if the member is already present" optimization, because it breaks the underlying map's with-accumulation optimization by looking at the map.
        return unsafeMakeConstSet(itemMap.with(element, null))
      }
      
      /** Return a new set with the element removed if it is present. */
      to without(element) {
        return if (constSet.contains(element)) {
          makeConstSet.fromKeysOf(itemMap.without(element))
        } else {
          constSet
        }
      }
      
      /** Return the intersection of two sets. The returned set has XXX document ordering */
      to and(other :ConstSet) :ConstSet {
        # XXX do this more efficiently with an asKeys or amplified-get-internal-map method
        return makeConstSet.fromKeysOf(itemMap & __makeMap.fromColumns(other.getElements(), [null] * other.size()))
      }
      
      /** Return the ... of two sets. The returned set has XXX document ordering */
      to butNot(other :ConstSet) :ConstSet {
        # XXX do this more efficiently with an asKeys or amplified-get-internal-map method
        return makeConstSet.fromKeysOf(itemMap &! __makeMap.fromColumns(other.getElements(), [null] * other.size()))
      }
      
      # xxx or/3 with optEjector

      /** Return the union of two sets. The returned set has this set's elements followed by those of the other which are not already present. */
      to or(other :ConstSet, strict :boolean) :ConstSet {
        # XXX do this more efficiently with an asKeys or amplified-get-internal-map method
        escape conflict {
          return makeConstSet.fromKeysOf(itemMap.or(__makeMap.fromColumns(other.getElements(), [null] * other.size()), strict, conflict))
        } catch _ {
          # XXX this is inefficient/silly. the exception should include the key, instead.
          def member := (constSet & other).getElements()[0]
          throw(`both sets contain ${E.toQuote(member)}, in strict union of ${E.toQuote(constSet)} and ${E.toQuote(other)}`)
        }
      }
      
      match [v,a] { E.call(setSugar, "instance_" + v, [constSet] + a) }
    }
  }
 
  bind makeConstSet { # XXX implements DeepFrozen
    /** Return the guard for ConstSets. */
    to asType() {
      return ConstSet
    }
    
    /** Return the empty ConstSet. */
    to getEmptySet() {
      # XXX memoize
      return makeConstSet.fromKeysOf([].asMap())
    }
    
    /** Make a set whose elements are the keys of itemMap. XXX Should also support any Iteratable, but doesn't yet. */
    to fromKeysOf(itemMap :Map[any, void]) {
      return unsafeMakeConstSet(itemMap)
    }
  }
  return makeConstSet
}