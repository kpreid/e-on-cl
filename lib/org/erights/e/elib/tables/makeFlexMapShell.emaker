# Copyright 2005-2006 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.enable("easy-return")
pragma.disable("explicit-result-guard")

def mapSugar := <elib:tables.mapSugar>

/** Makes a full FlexMap given an object implementing the data storage. */
def makeFlexMapShell implements DeepFrozen {
  to run(self, impl) {
    def flexMap { # implements FlexMap
      
      to __printOn(out :TextWriter) {
        out.printSame(impl)
      }
      
      method keyType()   { impl.keyType() }
      method valueType() { impl.valueType() }
 
      method size() { impl.size() }
      method fetch(key, absentThunk) { impl.fetch(key, absentThunk) }
      method getKeys() { impl.getKeys() }
      method getPair() { impl.getPair() }
 
      to put(key, value) {
        impl.put(key, value, false, throw) }
      to put(key, value, strict :boolean) {
        impl.put(key, value, strict, throw) }
      to put(key, value, strict :boolean, ejector) {
        impl.put(key, value, strict, ejector) }
      
      to removeKey(key) {
        impl.removeKey(key, false) }
      to removeKey(key, strict :boolean) {
        impl.removeKey(key, strict) }
      
      to removeKeys(mask) {
        flexMap.removeKeys(mask, false) }
      to removeKeys(mask, strict :boolean) {
        for key => _ in mask {
          flexMap.removeKey(key, strict)
        }
      }
      
      to putAll(new) {
        flexMap.putAll(new, false, throw) }
      to putAll(new, strict) {
        flexMap.putAll(new, strict, throw) }
      to putAll(new, strict :boolean, ejector) {
        # XXX should new be coerced to EMap? or to a soft Iteratable?
        for key => value in new {
          flexMap.put(key, value, strict, ejector)
        }
      }
      
      match [v,a] { E.call(mapSugar, v, [flexMap] + a) }
    }
    return flexMap
  }
}