# Copyright 2002 Combex, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")

def OneArgFunc :DeepFrozen := <import:org.erights.e.elib.util.OneArgFunc>

/** Wraps a Resolver in a way suitable for inclusion as an argument in a __whenMoreResolved message.
  * 
  * Turns the first response such an argument may get into a resolution of the Resolver, and then become inoperative.
  *
  * @author Mark S. Miller
  */
def makeRedirector(resolver) implements DeepFrozen, ExitViaHere {
    
    # Dropped after the redirector is used.
    var myOptResolver := resolver
    
    return def redirector implements OneArgFunc {
        /** Resolve the Resolver to the arg. */
        to run(arg :any) :void {
            if (null != myOptResolver) {
                myOptResolver.resolve(arg)
                myOptResolver := null
            }
        }

        /**
         * Smash the Resolver with the arg.
         */
        to __reactToLostClient(problem) :void {
            if (null != myOptResolver) {
                myOptResolver.smash(problem)
                myOptResolver := null
            }
        }
    }
}
