# Copyright 2005-2006 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.enable("easy-return")
pragma.disable("explicit-result-guard")

def enums {
  to fetch(key, _) { return key }
  to without(key) { return enums }
}

def [=> NOW, => LATER, => WAIT, => ELEMENTS, => STATUS, => ADVANCE, => QUERY] | _ := enums

def EIO implements DeepFrozen {
  to getRange() { return nullOk[int >= 0] }

  /** The value denoting all remaining elements in an EIO stream. */
  to getALL() { return null }
  
  # XXX technically these are only used by InStream
  # xxx should they be non-strings?
  to getNOW() { return NOW }
  to getLATER() { return LATER }
  to getWAIT() { return WAIT }
  to getELEMENTS() { return ELEMENTS }
  to getSTATUS() { return STATUS }
  to getADVANCE() { return ADVANCE }
  to getQUERY() { return QUERY }
  
  /** Transfers the elements of an InStream to an OutStream. Acts immediately if possible; for non-immediate effects, use EIO <- join(...). The return value will be resolved, to the terminator of the input stream, as soon as no more elements will be delivered to the OutStream; at this time, the output stream will also be terminated. */
  to join(input, output) {
    return <import:org.cubik.cle.io.join>(input, output)
  }
  
  to pipe(options) {
    return <import:org.cubik.cle.io.makeSimplePipe>(
             options)
  }
}