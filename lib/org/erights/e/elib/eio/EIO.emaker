# Copyright 2005-2007 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")
pragma.enable("accumulator")

def makeTextWriter :DeepFrozen := <elib:oldeio.makeTextWriter>

def ALL :DeepFrozen := null # XXX should be something else
def Range :DeepFrozen := nullOk[int >= 0]

def whenMaybeNow(ref, reactor) as DeepFrozen {
  return if (Ref.isResolved(ref)) {
    reactor(ref)
  } else {
    Ref.whenResolved(ref, reactor)
  }
}

def evSplit(n, l) {
  return accum [] for i in 0..!n { _.with(l <- get(i)) }
}

def EIO implements DeepFrozen, ExitViaHere {
  to getRange() { return Range }

  /** The value denoting all remaining elements in an EIO stream. */
  to getALL() { return ALL }
  
  /** Transfers the elements of an InStream to an OutStream. Acts immediately if possible; for non-immediate effects, use EIO <- join(...). The return value will be resolved, to the terminator of the input stream, as soon as no more elements will be delivered to the OutStream; at this time, the output stream will also be terminated. */
  to join(input, output) {
    return <import:org.cubik.cle.io.join>(input, output)
  }
  
  to pipe(options) {
    return <import:org.cubik.cle.io.makeSimplePipe>(options)
  }
  
  /** Take at least 'minimum' and at most 'maximum' elements from 'inStream' and return them.
    * 
    * 'minimum' may not be ALL unless 'maximum' is ALL; this is an implementation limitation. It would mean to read all elements and fail unless there are 'maximum' of them.
    * 
    * XXX stream redesign: to be reviewed */
  to takeRange(minimum :DeepFrozen, maximum :DeepFrozen, inStream) {
    
    if (maximum != ALL && (minimum == ALL || minimum > maximum)) {
      throw(`impossible range for EIO.takeRange, $minimum..$maximum, requested from $inStream`)
    }
    
    return whenMaybeNow(inStream.takeAtMost(0), fn first {

      def [append, snapshot] := switch (first) {
        # XXX doesn't work for Twines 
        match =="" { def [tw, sb] := makeTextWriter.makeBufferingPair(); [tw.write, sb.snapshot] }
        match ==[] { def l := [].diverge(); [l.append, l.snapshot] }
        match ==null { return [] } # XXX should return according to chunk type
        match t ? Ref.isBroken(t) { return t }
        # XXX support unknown chunk types
        match _ {
          # XXX unnecessary printing
          throw(`$inStream produced unusual or nonempty chunk $first when asked for empty chunk`)
        }
      }
      
      def computeWanted := if (maximum == ALL) {
        fn { ALL }
      } else {
        fn { maximum - snapshot().size() }
      }
      def isSufficient := if (minimum == ALL) {
        fn { false }
      } else {
        fn { minimum <= snapshot().size() }
      }
      
      def result
      def loop() {
        while (!Ref.isResolved(result)) {
          def taken := inStream.takeAtMost(computeWanted())

          /** handle the chunk once it's resolved */
          def handle() {
            switch (taken) {
              match ==null {
                # This can produce a result shorter than the requested minimum; this seems better than failure at the moment. This could be changed by checking at this point for (minimum == ALL || minimum <= snapshot().size()), and failing otherwise.
                bind result := snapshot()
              }

              match b ? (Ref.isBroken(b)) { bind result := b }

              match chunk { 
                append(chunk)
                if (isSufficient()) {
                  bind result := snapshot()
                }
              }
            }
          }
          
          # Note: this could be simplified by relying on tail-recursion; we would eliminate the while loop, invoke loop() at the end of handle(), and . I (kpreid) don't quite want to write E code that relies on tail-recursion optimization yet, though.
          if (!Ref.isResolved(taken)) {
            when (taken) -> {} finally {
              handle()
              loop() # reenter while loop
            }
            return # exit while loop
          } else {
            handle()
          }
        }
      }
      loop()
      result
    })
  }
  
  /** XXX stream redesign: to be reviewed */
  to takeAll(inStream) {
    return EIO.takeRange(ALL, ALL, inStream)
  }
  
  /** If inStream is not near, produce a near stream which proxies for it. */
  to asNearIn(streamRef :any) {
    def InStream := <elib:eio.InStream>
    if (Ref.isNear(streamRef)) {
      return streamRef
    } else {
      def chunkType := streamRef <- getChunkType()
      return def ::"near InStream proxy" implements InStream {
        to getChunkType() {
          if (Ref.isNear(streamRef)) {
            return streamRef.getChunkType()
          } else {
            return chunkType
          }
        }
        to takeAtMost(size) {
          # XXX does not implement overlapping-request robustness -- if an there's an <- in the queue then a . could sneak in before it
          if (Ref.isNear(streamRef)) {
            return streamRef.takeAtMost(size)
          } else {
            return streamRef <- takeAtMost(size)
          }
        }
      }
    }
  }

  /** If streamRef is not near, produce a near stream which proxies for it. */
  to asNearOut(streamRef :any) {
    def OutStream := <elib:eio.OutStream>
    if (Ref.isNear(streamRef)) {
      return streamRef      
    } else {
      def chunkType := streamRef <- getChunkType()
      return def ::"near OutStream proxy" implements OutStream {
        to getChunkType() {
          if (Ref.isNear(streamRef)) {
            return streamRef.getChunkType()
          } else {
            return chunkType
          }
        }
        to reserve() {
          if (Ref.isNear(streamRef)) {
            # XXX can't do immediate if there were outstanding eventual; need to do the isFresh sort of thing, set a flag and clear it if the <- completes
            return streamRef <- reserve()
          } else {
            return streamRef <- reserve()
          }
        }
      }
    }
  }
}