# Copyright 2007 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")

<import:org.cubik.cle.makeAdvisoryInterface>(
/** XXX Finish this documentation
  */
interface "org.erights.e.elib.eio.inStream" \
  extends <import:org.erights.e.elib.eio.stream> {
  /** Take up to the specified size of chunk from the stream. 
    *
    * Returns (possibly a promise for) either the taken chunk, or the stream's terminator.
    * 
    * takeAtMost(0) must eventually resolve even if no elements are yet available.
    * 
    * A client should not invoke takeAtMost/1 before the result of a previous invocation has resolved; a stream should throw if this occurs, and must not become terminated.
    */
  to takeAtMost(maximum :(EIO.getRange())) :vow[any]
  
  /** Communicates closure (null terminator) upstream. Not guaranteed to have any effect on future take operations. */
  to close() :void
  
  /** Communicates failure (broken terminator) upstream. Not guaranteed to have any effect on future take operations. */
  to fail(problem :(<type:java.lang.Throwable>)) :void # XXX Throwable is Java legacy
})