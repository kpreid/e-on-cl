# Copyright 2004 Hewlett Packard, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.8")

# Modified by Kevin Reid on 2005-03-14:
#   * Safe against nonlocal exits by the value maker
#   * makeLazySlot is DeepFrozen

def Slot :DeepFrozen := <type:org.erights.e.elib.slot.Slot>

def makeLazySlot implements DeepFrozen, ExitViaHere {
    to run(maker) :Slot {
        var getter := null
    
        def firstGetter() :any {
            def v
            getter := fn { v }
            try {
              bind v := maker()
            } catch p {
              v__Resolver.resolveRace(getter := Ref.broken(p))
              throw(p)
            } finally {
              if (!Ref.isResolved(v)) {
                v__Resolver.resolveRace(getter := 
                  Ref.broken("nonlocal exit by lazy slot's maker"))
              }
            }
            return v
        }
        getter := firstGetter
    
        def lazySlot implements Slot {
            to get()    :any { return getter() }
            to put(_)  :void { throw("this lazy Slot may not be changed") }
            to isFinal() :boolean { return true }
        }
        return lazySlot
    }
}
