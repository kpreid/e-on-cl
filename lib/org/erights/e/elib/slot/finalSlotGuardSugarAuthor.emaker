# Copyright 2007 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")

def ZeroAuditor { to audit(_) { return false }}

def finalSlotGuardSugarAuthor(DeepFrozenStamp, TransparentStamp) {
  def FinalSlotPGuardStamp { to audit(_) { return true }}
  def FinalSlotPGuard { 
    to coerce(sp, ej) {
      if (__auditedBy(FinalSlotPGuardStamp, sp)) {
        return sp
      } else {
        throw.eject(ej, "not a FinalSlot[_] guard")
      }
    }
  }
  
  #var sugarRootLazy match msg { E.callWithPair(sugarRootLazy := <import:org.cubik.cle.sugarRoot>, msg) } -- XXX doesn't work because var-obj isn't yet supported
  var sugarRootLazy := null
  sugarRootLazy := def sugarRootThunk match msg { E.callWithPair(sugarRootLazy := <import:org.cubik.cle.sugarRoot>, msg) }

  return def finalSlotGuardSugar extends sugarRootLazy implements DeepFrozenStamp, ExitViaHere {

    to getValueGuard() { return any }

    to "instance_match__get/1"(self, specimen, ejector) {
      return [FinalSlotPGuard.coerce(specimen, ejector).getValueGuard()]
    }

    to instance_get(self, valueGuard) {
      return def FinalSlotP implements DeepFrozen.isDeepFrozen(valueGuard).pick(DeepFrozenStamp, ZeroAuditor), FinalSlotPGuardStamp, Selfless, TransparentStamp {
        to __optUncall() {
          return [<import:org.erights.e.elib.slot.makeFinalSlot>.asType(), "get", [valueGuard]]
        }
        
        to __printOn(out :TextWriter) {
          out.quote(self)
          out.print("[")
          out.quote(valueGuard)
          out.print("]")
        }

        to getValueGuard() { return valueGuard }
      
        to coerce(specimen, ejector) {
          return __makeFinalSlot(valueGuard.coerce(
                                   self.coerce(specimen, ejector).get(),
                                   ejector))
        }
      }
    }
  }
}
