# Copyright 2005-2006 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")

pragma.enable("function-implements")

def _make(subGuards) implements DeepFrozen {
  def intersectionGuard implements DeepFrozen."optionally"() {
    to __printOn(out :TextWriter) {
      out.print("all")
      out.quote(subGuards) # pun
    }
    
    # xxx this flattening can no longer be done trivially
    # to and(other) {
    #   return <elib:slot.makeIntersectionGuard>(subGuards.with(other))
    # }
    
    /** Audits objects with all of the subGuards, which must then be auditors. */
    to audit(objectExpr, witness) {
      for auditor in subGuards {
        witness.ask(auditor)
      }
      return false
    }
    
    to coerce(var specimen, optEjector) {
      for guard in subGuards {
        specimen := guard.coerce(specimen, optEjector)
      }
      return specimen
    }
  }
  
  return intersectionGuard
}

def makeIntersectionGuard implements DeepFrozen {
  to run(subGuards) { return _make(subGuards) }
  match [=="get", subGuards] { _make(subGuards) }
}

# XXX unneeded check
# XXX flatten check
