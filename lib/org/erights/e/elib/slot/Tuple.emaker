# Copyright 2005-2007 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")

pragma.enable("accumulator")

def EventuallyDeepFrozen :(<import:org.erights.e.elib.slot.Same>)[DeepFrozen."eventually"()] := DeepFrozen."eventually"()

interface TupleGuard guards TupleGuardStamp {}

def Tuple0 implements EventuallyDeepFrozen, ExitViaHere {
  method __optSealedDispatch(brand) :any {
    if (brand == EventuallyDeepFrozen.getPeekBrand()) {
      EventuallyDeepFrozen.getPeekSealer().seal(meta.getState())
    }
  }

  to __printOn(out :TextWriter) {
    out.print("Tuple")
  }

  to "match__of/1"(specimen, ejector) {
    def ofKind := TupleGuard.coerce(specimen, ejector)
    return [ofKind.getElementGuards()]
  }

  to of(elementGuards) {
    return def Tuple1 implements EventuallyDeepFrozen, TupleGuardStamp {
      method __optSealedDispatch(brand) :any {
        if (brand == EventuallyDeepFrozen.getPeekBrand()) {
          EventuallyDeepFrozen.getPeekSealer().seal(meta.getState())
        }
      }

      to __printOn(out :TextWriter) {
        out.quote(Tuple0)
        out.quote(elementGuards)
      }
      
      to getElementGuards() { return elementGuards }
      
      to coerce(specimen, optEjector) {
        # XXX should we do specimen.__conformTo(Tuple1)? As it is, the specimen cannot tell it's coercing to a List-of-specific-element-type.
        def trueList := List.coerce(specimen, optEjector)
        
        if (trueList.size() != elementGuards.size()) {
          throw.eject(optEjector, `Need ${elementGuards.size()} element list: ${E.toQuote(trueList)}`)
        } else {
          return accum [] \
            for i => element in trueList {
              _.with(elementGuards[i].coerce(element, optEjector))
            }
        }
      }
    }
  }
  
  match [=="get", elementGuards] { Tuple0.of(elementGuards) }
}