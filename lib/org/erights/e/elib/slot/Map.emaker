# Copyright 2005 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.enable("easy-return")
pragma.disable("explicit-result-guard")
pragma.enable("accumulator")

def simplifyFQName := <import:org.cubik.cle.prim.simplifyFQName>

def ConstMap := <import:org.cubik.cle.prim.ConstMap>

def Map0 extends __makeGuard(Map0) {
  to __printOn(out :TextWriter) {
    out.print("Map")
  }

  to coerce(specimen, optEjector) {
    return ConstMap.coerce(specimen, optEjector)
  }

  to get(keyGuard, valueGuard) {
    def Map1 extends __makeGuard(Map1) {

      to coerce(var specimen, optEjector) {
        specimen := Map0.coerce(specimen, optEjector)
        
        # XXX we need a more efficient way of doing this which doesn't require accumulating a new map for non-coercing cases
        return accum [].asMap() for subKey => subValue in specimen {
          _.with(keyGuard  .coerce(subKey,   optEjector),
                 valueGuard.coerce(subValue, optEjector))
        }
      }
    
      to __printOn(out :TextWriter) {
        out.print("Map[")
        out.quote(keyGuard)
        out.print(", ")
        out.quote(valueGuard)
        out.print("]")
      }
    }
    
    return Map1
  }
  
  to getTheTrivialValue() { return [].asMap() }
}