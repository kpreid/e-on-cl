# Copyright 2008 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")
pragma.enable("call-pattern")

def Same :DeepFrozen := <import:org.erights.e.elib.slot.Same>
def EventuallyDeepFrozen :Same[DeepFrozen."eventually"()] := DeepFrozen."eventually"()
def FinalSlot :DeepFrozen := <elib:slot.makeFinalSlot>.asType()

def [=> makeNounExpr :DeepFrozen, => makeEMethod :DeepFrozen, => makeEScript :DeepFrozen] | _ := <elang:evm.*>
def EScript :DeepFrozen := makeEScript.asType()

# XXX duplicated from DeepFrozenAuthor
/** Non-coercing guard wrapper. */
def Really as DeepFrozen {
  to get(guard) {
    return def reallyGuard {
      to coerce(specimen, optEjector) {
        def coerced := guard.coerce(specimen, optEjector)
        if (coerced != specimen) {
          throw.eject(optEjector, E.toQuote(coerced) + " must be same as original specimen " + E.toQuote(specimen))
        }
        return coerced
      }
    }
  }
}

def SubrangeGuardAuthor(TransparentStamp :DeepFrozen) {
  return def SubrangeGuard as DeepFrozen {
    to __printOn(out :TextWriter) {
      out.write("SubrangeGuard")
    }

    to get(superrangeGuard) {
      def SubrangeGuard1 implements EventuallyDeepFrozen, Selfless, TransparentStamp {

        method __optSealedDispatch(brand) :any {
          if (brand == EventuallyDeepFrozen.getPeekBrand()) {
            EventuallyDeepFrozen.getPeekSealer().seal(meta.getState())
          }
        }
      
        to __optUncall() { return [SubrangeGuard, "get", [superrangeGuard]] }

        to coerce(specimen, ejector) {
          if (__auditedBy(SubrangeGuard1, specimen)) {
            return specimen
          } else if (__auditedBy(SubrangeGuard1,
                      def c := specimen.__conformTo(SubrangeGuard1))) {
            return c
          } else {
            throw.eject(ejector, `$specimen isn't approved as a SubrangeGuard[$superrangeGuard]`)
          }
        }
        
        to passes(specimen :any) :boolean {
          return __auditedBy(SubrangeGuard1, specimen)
        }
    
        to __printOn(out :TextWriter) {
          out.quote(SubrangeGuard)
          out.print("[")
          out.quote(superrangeGuard)
          out.print("]")
        }
        
        to audit(audition) :boolean {
          def expr := audition.getObjectExpr()
          def ::"methods" := (expr.getScript() :EScript).getMethods()
          for makeEMethod(_, _, =="coerce", [_, _], makeNounExpr(_, noun, _), _, _) in ::"methods" {
            def resultGuardSlotGuard := audition.getGuard(noun)
            #if (Same[makeFinalSlot(superrangeGuard)].rangeSupersetOf(resultGuardSlotGuard)) {
            #  return true
            #}
            if (resultGuardSlotGuard =~ FinalSlot[Same[resultGuard]] ? (resultGuardSlotGuard == FinalSlot[Same[resultGuard]])) {
              if (resultGuard == superrangeGuard \
                    || superrangeGuard.__respondsTo("rangeSupersetOf", 1) \
                         && superrangeGuard.rangeSupersetOf(resultGuard) == true) {
                return true
              }
              throw(`${audition.getFQName()} does not have a result guard implying $superrangeGuard, but $resultGuard`)
            }
            throw(`${audition.getFQName()} does not have a determinable result guard, but <& $noun> :$resultGuardSlotGuard`)
          }
          throw(`${audition.getFQName()} has no coerce/2 method`)
        }
      }
    
      return SubrangeGuard1
    }
  }
}
