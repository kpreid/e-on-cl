# Copyright 2005-2006 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")

def EventuallyDeepFrozen := DeepFrozen."eventually"()

def NullOkParamStamp implements DeepFrozen {to audit(_) { return true }}
def NullOkParam implements DeepFrozen {to coerce(sp, ej) { if (__auditedBy(NullOkParamStamp, sp)) {return sp} else {throw.eject(ej, "Not a parameterized nullOk")}}}

def nullOk0 implements DeepFrozen {

  to __printOn(out :TextWriter) :void {
    out.print("nullOk")
  }
  
  to coerce(specimen, optEjector) :any {
    if (specimen != null) {
      throw.eject(optEjector, "must be null")
    }
  }
  
  to getTheTrivialValue() { return null }
  
  to get(subGuard) {
    def nullOk1 implements EventuallyDeepFrozen, NullOkParamStamp {
      method __optSealedDispatch(brand) :any {
        if (brand == EventuallyDeepFrozen.getPeekBrand()) {
          EventuallyDeepFrozen.getPeekSealer().seal(meta.getState())
        }
      }
    
      to __printOn(out :TextWriter) :void {
        # XXX print this explicitly as E-syntax sugared "get" call
        out.print("nullOk")
        out.quote([subGuard])
      }
      
      to getSubGuard() { return subGuard } # XXX name
    
      to coerce(specimen, optEjector) {
        if (specimen == null) {
          return null
        } else {
          return subGuard.coerce(specimen, optEjector)
        }
      }
    }
    return nullOk1
  }

  to "match__get/1"(specimen, ejector) {
    def ofKind := NullOkParam.coerce(specimen, ejector)
    return [ofKind.getSubGuard()]
  }
}