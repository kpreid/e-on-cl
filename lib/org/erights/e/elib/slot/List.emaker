# Copyright 2005-2006 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")

pragma.enable("accumulator")
pragma.enable("one-method-object")

def simplifyFQName := <import:org.cubik.cle.prim.simplifyFQName>
def makeCoercionFailure := <import:org.cubik.cle.fail.makeCoercionFailure>
def EventuallyDeepFrozen := DeepFrozen."eventually"()
def ConstList := <type:org.erights.e.elib.tables.ConstList>

def List0 implements EventuallyDeepFrozen {

  method __optSealedDispatch(brand) :any {
    if (brand == EventuallyDeepFrozen.getPeekBrand()) {
      EventuallyDeepFrozen.getPeekSealer().seal(meta.getState())
    }
  }

  to __printOn(out :TextWriter) {
    out.print("List")
  }

  to coerce(specimen, optEjector) {
    return ConstList.coerce(specimen, 
                            fn _ { throw.eject(optEjector, makeCoercionFailure(specimen, List0)) })
  }

  to get(elementGuard) {
    def List1 implements EventuallyDeepFrozen {

      method __optSealedDispatch(brand) :any {
        if (brand == EventuallyDeepFrozen.getPeekBrand()) {
          EventuallyDeepFrozen.getPeekSealer().seal(meta.getState())
        }
      }

      to coerce(var specimen, optEjector) {
        specimen := List0.coerce(specimen, optEjector)
        
        #trace("coerce " + E.toQuote([specimen, elementGuard]))
        if (elementGuard == any) {
          # If the guard is any, then no elementwise coercion or testing need be
          # done.
          #trace("  any case")
          return specimen
        } else {
          def coerceReturn := __return
          # Scan the specimen for an element which changes when coerced, and
          # prepare to create a new list.
          #trace("  general guard case")
          return __makeList.fromIteratableValues(def adapter.iterate(f) {
            
            #trace("  inside adapter")
            var building := false
            
            for i => elem in specimen {
              #trace("  element " + E.toQuote(i) + " " + E.toQuote(elem) + " in specimen")
              if (building) {
                #trace("  building")
                # If we're building a new list, coerce and pass each element.
                f(i, def v := elementGuard.coerce(elem, optEjector))
                #trace("value was " + E.toQuote(v))
              } else {
                # If we're *not* building a new list, then we check if the
                # element under consideration changes when coerced.
                def coerced := elementGuard.coerce(elem, optEjector)
                #trace("not building; coerced is " + E.toQuote(coerced))
                if (coerced == elem) {
                  # If it doesn't, then we do nothing, possibly falling out
                  # to the return-the-original-list case below
                  #trace("equal, continuing")
                  continue
                } else {
                  #trace("unequal, entering build")
                  # The element changed, so we need to put together a new list.
                  building := true
                  
                  # Collect everything we skipped so far, not in need of
                  # coercion
                  specimen.run(0, i).iterate(f)
                  
                  # The coerced value
                  f(i, coerced)
                }
              }
            }
            if (!building) {
              # Returning the original list, because none of the elements changed
              # under coercion. We've already built most of the list, but this
              # at least saves the final construction and introducing a new
              # nontrivially-equal value.
              coerceReturn(specimen)
            }
          })
        }
      }
    
      to __printOn(out :TextWriter) {
        out.print("List[")
        out.quote(elementGuard)
        out.print("]")
      }
    }
    
    return List1
  }
  
  to getTheTrivialValue() { return [] }
}