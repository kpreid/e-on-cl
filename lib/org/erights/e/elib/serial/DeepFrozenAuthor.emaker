# Copyright 2005-2007 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")

pragma.enable("accumulator")
pragma.enable("function-implements")
pragma.enable("call-pattern")

/** Non-coercing guard wrapper. */
def Really {
  to get(guard) {
    return def reallyGuard {
      to coerce(specimen, optEjector) {
        def coerced := guard.coerce(specimen, optEjector)
        if (coerced != specimen) {
          throw.eject(optEjector, E.toQuote(coerced) + " must be same as original specimen " + E.toQuote(specimen))
        }
        return coerced
      }
    }
  }
}

/** Version of collection.maps(key) that has fewer dependencies. */
def _maps(collection, key) { collection.fetch(key, fn { return false }); return true }

def ConstList := <import:org.cubik.cle.prim.ConstList>

def primGuardAnswers := accum [].asMap() for x in [
  String,
  Twine,
  boolean,
  <import:org.cubik.cle.prim.char>,
  <import:org.cubik.cle.prim.int>,
  <import:org.cubik.cle.prim.float64>,
] { _.with(x, true) } | accum [].asMap() for x in [
    any,
  ] { _.with(x, false) }

/** Version of safeScope["require"] that has fewer dependencies. */
def requireDF{
  to run(condition, problemThunk) :void {
    if (!condition) { throw(problemThunk()) }
  }
  to run(condition) :void {
    if (!condition) { throw("Unexpected false") }
  }
}

def makeCallExpr := <import:org.erights.e.elang.evm.makeCallExpr>

def [NounExpr, EExpr, ENode, FinalPattern, IfExpr, SeqExpr, EScript] := \
  { var types := []
    ["NounExpr", "EExpr", "ENode", "FinalPattern", "IfExpr", "SeqExpr", "EScript"] \
      .iterate(fn _,name {types := types.with(<import>["org.erights.e.elang.evm.type." + name]); null})
    types
  }


def primParser := <import:org.cubik.cle.prim.parser>
/** Version of e__quasiParser that doesn't do proper substitution, so has fewer dependencies. */
def eDF__quasiParser {
  to valueMaker(text) {
    requireDF((text.indexOf1('$') == -1) & (text.indexOf1('@') == -1), fn{"eDF`` doesn't support holes or escapes"})
    def parsed := primParser(text)
    def substituter {
      to substitute(_) {
        return parsed
      }
    }
    return substituter
  }
}

# XXX this is hoisting parser invocations out of EventuallyDeepFrozen#audit. Ideally, the compiler would do this for us, but this is not yet implemented.
def [
  ::"eDF`__equalizer`",
  ::"eDF`EventuallyDeepFrozen.getPeekBrand()`",
  ::"eDF`EventuallyDeepFrozen`",
  ::"eDF`EventuallyDeepFrozen.getPeekSealer().seal(meta.getState())`",
] := {
  var out := []
  [
    "__equalizer",
    "EventuallyDeepFrozen.getPeekBrand()",
    "EventuallyDeepFrozen",
    "EventuallyDeepFrozen.getPeekSealer().seal(meta.getState())",
  ] \
    .iterate(fn _,name {out := out.with(eDF__quasiParser.valueMaker(name).substitute([])); null})
  out
}

def exprShorten(expr) {
  return \
    escape mismatch {
      def s :Really[SeqExpr] exit mismatch := expr
      def [single] exit mismatch := s.getSubs()
    } catch _ {
      expr
    }
}

def makeCoercedSlot := <import:org.cubik.cle.prim.makeCoercedSlot>
def lazyB(f) {
  return makeCoercedSlot(any, def _ { to get() { return f() }}, null)
}

def emptyStatic := <import:org.cubik.cle.prim.makeStaticScope>.getEmptyScope()

def selflessTransparentUncaller {
  to optUncall(specimen) {
    if (Selfless.passes(specimen) & Transparent.passes(specimen)) {
      def p := specimen.__optUncall()
      requireDF(p != null, fn { "broken Transparent object: " + E.toQuote(specimen) })
      return p
    }
  }
}

def selflessCrashUncaller {
  to optUncall(specimen) {
    if (Selfless.passes(specimen)) {
      throw("don't know how to deal with Selfless object " + E.toQuote(specimen))
    }
  }  
}

def emptySofar := [].asMap()

def DeepFrozenAuthor(DeepFrozenStamp, semitransparentUncaller) {

  def DeepFrozen0
  def OptionallyDeepFrozen
  def EventuallyDeepFrozen

  # lazily load the brand, because requireDeepFrozen must be initially loadable with no import dependencies, since it is used in <import>'s cache check '
  var getPeekBrandKit := null
  getPeekBrandKit := fn {
    def kit := <import:org.erights.e.elib.sealing.makeBrand>("EventuallyDeepFrozen state peeking")
    getPeekBrandKit := fn { kit }
    kit
  }
  
  def &&peekSealer := lazyB(fn { getPeekBrandKit().getSealer() })
  def &&peekUnsealer := lazyB(fn { getPeekBrandKit().getUnsealer() })
  def &&peekBrand := lazyB(fn { getPeekBrandKit().getBrand() })
  
  def selflessSemitransparentUncaller {
    to optUncall(s) {
      if (Selfless.passes(s)) {
        return semitransparentUncaller.optUncall(s)
      }
    }
  }
  
  def eventuallyUncaller {
    to optUncall(specimen) {
      if (__auditedBy(EventuallyDeepFrozen, specimen)) {
        # The auditor ensures that this will not fail.
        def state := peekUnsealer.unseal(specimen.__optSealedDispatch(peekBrand))
        
        # Using the uncall of the state is just an easy way to transform it into a portrayal to adapt to the uncaller protocol.
        return state.__optUncall()
      }
    }
  }
  
  # [uncaller, isTransparent], where isTransparent means it's OK to reveal the components to the caller
  def descenders := [
    # An object which is Selfless by definition has no mutable state (because that would give it an identity) that is not a 'separate' reference; by these uncallers we handle those cases.
    [selflessTransparentUncaller, true],
    [selflessSemitransparentUncaller, false],
    [selflessCrashUncaller, false],
    [eventuallyUncaller, false],
  ]
  
  def rtrace(msgThunk) {
    #traceln(if (msgThunk =~ msg :String) {msg} else {msgThunk()})
  }

  # XXX sofar should be a set instead, but they're nonprimitive
  def requireDeepFrozen(specimen, sofar, optEjector, root) :void {
    rtrace(fn{ "requireDeepFrozen " + E.toQuote(specimen) + ", " + E.toQuote(sofar.getKeys()) + ", " + E.toQuote(optEjector) + ", " + E.toQuote(root) })
    def specimenKey := __equalizer.makeTraversalKey(specimen)
    if (_maps(sofar, specimenKey)) {
      # recursion check
      return
    } else {
      def sofarther := sofar.with(specimenKey, null)
      
      if (__auditedBy(DeepFrozenStamp, specimen)) {
        # atomic DeepFrozenness
        rtrace("--rDF atomic")
        return

      } else if (Ref.isBroken(specimen)) {
        rtrace("--rDF broken")
        requireDeepFrozen(Ref.optProblem(specimen), sofarther, optEjector, root)
        return
      
      } else {
        # XXX For efficiency, we should allow the object to carry a cached flag indicating that it has now been proven deep-frozen, instead of having to traverse it every time.
        # We can tell it to set the flag if and only if the entire requireDeepFrozen operation completes; or, more precisely, once the specimen has been accepted and we have reached a point where sofar is empty. If sofar is not empty, it is possible that the specimen contains a reference to something whose DeepFrozenness is still being checked.
                
        # try various ways to inspect the state of the object
        for [uncaller, isTransparent] in descenders {
          def portrayal := uncaller.optUncall(specimen)
          if (portrayal == null) { continue }
          
          rtrace(fn{"--rDF chose uncaller " + E.toQuote(uncaller)})
          
          # ejectorForTranslucent is used when the components we are descending into are private and so should not be used
          escape ejectorForTranslucent {

            def ejectorForParts := if (isTransparent) { optEjector } else { ejectorForTranslucent }
            def sub(_, component) {
              requireDeepFrozen(component, sofarther, ejectorForParts, root)
            }

            sub(null, portrayal[0])
            sub(null, portrayal[1])
            ConstList.coerce(portrayal[2], throw).iterate(sub)

            rtrace("--rDF uncall walked")
            return
          } catch p {
            # XXX make the fallthrough else below eject a typed exception that we use in generating this message, so the client can know whether this is unsettled ('change your code to wait longer') or definitely not DeepFrozen ('sorry, hopeless')
            # xxx future extensions: make this exception contain (sealed) the full details of what chain of subobjects led to the non-DeepFrozen object.
            rtrace(fn{"--rDF exiting and discarding subexception for privacy: " + E.toQuote(p)})
            traceln("DeepFrozen private component failed: " + E.toQuote(p))
            throw.eject(optEjector, E.toQuote(root) + " is not DeepFrozen because " + E.toQuote(specimen) + " contains references that are unsettled or not DeepFrozen")
          }
          rtrace("--rDF amplified")
          return
        }
        
        rtrace("--rDF opaque")
        throw.eject(optEjector, 
          if (__equalizer.sameYet(specimen, root)) {
            E.toQuote(root) + " is not DeepFrozen"
          } else {
            E.toQuote(root) + " is not DeepFrozen because " + E.toQuote(specimen) + " is not"
          }
        )
      }
    }
    throw("can't happen")
  }

  

  def requireAudit(audition, fail) :void implements DeepFrozenStamp {
    def objectExpr := audition.getObjectExpr()
    
    def patternSS := objectExpr.getPattern().staticScope()
    
    for name => _ in objectExpr.getScript().staticScope().namesUsed() &! patternSS.defNames() {
      if (_maps(patternSS.varNames(), name)) {
        throw.eject(fail, E.toQuote(name) + " in the definition of " + audition.getFQName() + " is a variable pattern and therefore not DeepFrozen")
      } else {
        def guard := audition.getGuard(name)
        
        if (DeepFrozen.rangeSupersetOf(guard) != true) {
          throw.eject(fail, E.toQuote(name) + " in the lexical scope of " + audition.getFQName() + " does not have a guard implying DeepFrozen, but " + E.toQuote(guard))
        }
      }
    }
  }

  OptionallyDeepFrozen__Resolver.resolve({
  /** Acts as the DeepFrozen auditor, but will not throw if the object is not acceptable. */
  def OptionallyDeepFrozen implements DeepFrozenStamp {
    to audit(audition :EAudition) {
      escape fail {
        requireAudit(audition, fail)
        audition.ask(DeepFrozenStamp)
      }
      return false
    }
  }})
  
  EventuallyDeepFrozen__Resolver.resolve({
  /** Allows objects to be verified as DeepFrozen without requiring either transparency or that their components be settled at audit time, by having them implement a method to ...XXX finish writing this documentation */
  def EventuallyDeepFrozen implements DeepFrozenStamp {
    to getPeekBrand() { return peekBrand }
    to getPeekSealer() { return peekSealer }
  
    to audit(audition) {
      # xxx I am well aware that this code is an awful mess. I do plan to do something about it.
      
      def objectExpr := audition.getObjectExpr()
      
      def label := "EventuallyDeepFrozen: " + audition.getFQName()
      
      def Same := <import:org.erights.e.elib.slot.Same>
      def FinalSlot := <import:org.erights.e.elib.slot.makeFinalSlot>.asType()
      
      /** Return true if 'expr' is proven to, when evaluated in the objectExpr's scope preceded by 'precedingExprs', result in the then value of 'slot'; otherwise exit via 'fail'. */
      def expressionWillHaveValue(expr :Really[EExpr], 
                                  slot :any,
                                  precedingNodes, # :Really[List[ENode]],
                                  fail
                                 ) :boolean {
        def nounExpr :NounExpr exit fail := expr
        def guard := audition.getGuard(def noun := nounExpr.getName())
        for p in precedingNodes {
          if (_maps(p.staticScope().outNames(), noun)) {
            fail("Preceding expression " + E.toString(p) + " redefines noun " + E.toString(expr))
          }
        }
        
        {
          if (guard == Same[slot]) { return true }
          escape x {
            def [value] := __makeFinalSlot."match__run/1"(slot, x)
            if (guard == FinalSlot[Same[value]]) { return true }
          }
          fail("the guard " + E.toString(guard) + " does not give reason to expect " + E.toQuote(slot))
        }
      }

      def precedingExprs := [objectExpr.getPattern(), objectExpr.getAuditors()]
      
      # The matcher is irrelevant provided that our method exists
      if (objectExpr.getScript() =~ script :Really[EScript]) {
        def methds := script.getMethods()
        # both 'method' and 'methods' are E keywords

        requireDF(
          for via (fn m,e{((m.getVerb() == "__optSealedDispatch") \
                           & (m.getPatterns().size() == 1)
                          ).pick(fn{m},e)()}) \
              methd in methds {
            
            def optResultGuard := methd.getOptResultGuard()
            if (optResultGuard != null) {
              expressionWillHaveValue(optResultGuard, &any, [objectExpr.getAuditors()], 
                fn p {throw(label + ": __optSealedDispatch result guard is not any: " + E.toString(p))})
            }
            
            def [brandPattern :Really[FinalPattern]] \
              exit fn _{throw(label + ": __optSealedDispatch argument pattern is not simple")} \
              := methd.getPatterns()
            requireDF(brandPattern.getOptGuardExpr() == null, 
              fn{label + ": __optSealedDispatch argument pattern must not have a guard"})
            # XXX We haven't implemented node pattern matching yet. Once EventuallyDeepFrozen is working, test and implement pattern matching and reenable this.
            # requireDF(methd.getBody() =~ \
            #     eDF`if ($brandPattern == @{auditorExpr ? expressionWillHaveValue(auditorExpr, &EventuallyDeepFrozen, auditorExprs + [brandPattern] + if (optResultGuard) {[optResultGuard]} else {[]})}.getPeekBrand()) { meta.getState() }`, 
            #   fn{`$label: __optSealedDispatch body is not suitably formed`})
            def methodBody := exprShorten(methd.getBody())
            def ifExpr :Really[IfExpr] \
              exit fn _{throw(label + ": __optSealedDispatch body is not an if, but the " + E.toQuote(methodBody.__getAllegedType()) + " " + E.toQuote(methodBody))} \
              := methodBody
            
            # XXX overly restrictive - we should extract the EventuallyDeepFrozen noun and check it instead of requiring that particular name
            requireDF((exprShorten(ifExpr.getTest()) == makeCallExpr(null, ::"eDF`__equalizer`", "sameEver", [brandPattern.getNoun(), ::"eDF`EventuallyDeepFrozen.getPeekBrand()`"], null)), fn{label + ": __optSealedDispatch if test does not compare the given brand to the peek brand"})
            expressionWillHaveValue(::"eDF`EventuallyDeepFrozen`", &EventuallyDeepFrozen, precedingExprs + [brandPattern] + if (optResultGuard != null) {[optResultGuard]} else {[]}, fn p{throw(label + ": EventuallyDeepFrozen is not EventuallyDeepFrozen: " + p)})
            expressionWillHaveValue(::"eDF`__equalizer`", &__equalizer, precedingExprs + [brandPattern] + if (optResultGuard != null) {[optResultGuard]} else {[]}, fn p{throw(label + ": __equalizer is not __equalizer: " + p)})
              
            # overly restrictive in the same way as the previous
            requireDF((exprShorten(ifExpr.getThen()) == ::"eDF`EventuallyDeepFrozen.getPeekSealer().seal(meta.getState())`"),
              fn{label + ": __optSealedDispatch if body is not EventuallyDeepFrozen.getPeekSealer().seal(meta.getState())"})
            expressionWillHaveValue(::"eDF`EventuallyDeepFrozen`", &EventuallyDeepFrozen, precedingExprs + [brandPattern] + if (optResultGuard != null) {[optResultGuard]} else {[]} + [ifExpr.getTest()], fn p{throw(label + ": EventuallyDeepFrozen is not EventuallyDeepFrozen in peek seal body: " + p)})
            
            break true
          } != null, 
          fn{label + ": no __optSealedDispatch/1 method found"})
      } else {
        throw(label + ": auditing plumbing not yet supported")
      }
      
      return true
    }
  }})

  DeepFrozen0__Resolver.resolve(def DeepFrozen implements DeepFrozenStamp {
    to __printOn(out :TextWriter) :void {
      out.print("DeepFrozen")
    }
    
    to audit(audition :EAudition) :boolean {
      requireAudit(audition, throw)
      audition.ask(DeepFrozenStamp)
      return false
    }
    
    to isDeepFrozen(specimen) :boolean {
      escape notOk { 
        requireDeepFrozen(specimen, emptySofar, notOk, specimen)
        return true
      }
      return false
    }
    
    to coerce(specimen, optEjector) :any {
      # XXX allow coercion?
      requireDeepFrozen(specimen, emptySofar, optEjector, specimen)
      return specimen
    }
    
    to rangeSupersetOf(guard) {
      
      # All the string tests below are so that we don't force the lazy-loading of those various guards (in case there's a loading dependency cycle) unless we have a guard specimen which might be one of them. Kludge, but AFAIK non-dangerous...
      # All of this is a temporary mechanism anyway. We need a more general way of accepting guards...
      def t := guard.__getAllegedType().getFQName()
      #traceln(t + " -- " + E.toString(t.startOf("Same", 0)))
      
      # XXX primGuardAnswers is an arbitrary list. Instead, check the guard for being a cl-type-guard, then ask it if its instances are DeepFrozen, or Selfless and parameterizable for all of its state (ook)
      escape no { return primGuardAnswers.fetch(guard, no) }
      
      if (guard == DeepFrozen) { return true }
      
      if (t.startOf("Same", 0) != -1) {
        def Same := <import:org.erights.e.elib.slot.Same>
        escape fail {
          def [value] := Same."match__get/1"(guard, fail)
        
          if ((Same[value] == guard)) {
            # XXX if the value is not DeepFrozen but resolves to being so later, then our answer will change from false to true. Is this bad?
            return DeepFrozen.isDeepFrozen(value)
          }
        }
      }
      if (t.startOf("FinalSlot", 0) != -1) {
        escape fail {
          # XXX this should somehow be generalized to any guard of a Selfless type which completely guards its members' state components
          def [valueGuard] := __makeFinalSlot.asType()."match__get/1"(guard, fail)
          return DeepFrozen.rangeSupersetOf(valueGuard)
        }
      }
      if (t.startOf("List", 0) != -1) {
        escape fail {
          # ditto
          def [valueGuard] := List."match__get/1"(guard, fail)
          return DeepFrozen.rangeSupersetOf(valueGuard)
        }
      }
      if (t.startOf("rderedSpace", 0) != -1) {
        if (guard == int) { return true }
        if (guard == float64) { return true }
        if (guard == char) { return true }
      }
      if (t.startOf("rderedRegion", 0) != -1) {
        if (<import:org.erights.e.elib.slot.SubrangeGuard>[DeepFrozen].passes(guard)) { return true }
        if (guard == float64) { return true }
        if (guard == char) { return true }
      }
      # XXX should have a way to interrogate a primitive-type guard about whether its instances are DeepFrozen, or Selfless
      return null
    }
    
    /** Audits as DeepFrozen, but does not throw an exception if the object is unacceptable. */
    to optionally() {
      return OptionallyDeepFrozen
    }
    
    /** Returns the eventually-DeepFrozen author, which allows objects to be verified as DeepFrozen without requiring either transparency or that their components be settled at audit time. */
    to "eventually"() {
      return EventuallyDeepFrozen
    }
  })
  
  return DeepFrozen
}
