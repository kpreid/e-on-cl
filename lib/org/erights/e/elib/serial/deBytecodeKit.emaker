#!/usr/bin/env rune

pragma.syntax("0.8")
pragma.enable("function-implements")

# Copyright 2002 Combex, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

# Copied from E-on-Java r460 and modified:
#   - Using different stream and binary-encoding imports
#   - DeepFrozen

def DEBuilderOf := <elib:serial.DEBuilderOf>

def makeAppendStream := <import:org.cubik.cle.io.makeAppendStream>
#def [=> InStream, => OutStream] | _ := <elib:eio.*>

def now := <import:org.cubik.cle.schedule.now>

def [=> WholeNum,
     => UnsignedInteger,
     => UTF8StringWithLength16, 
     => Float64, 
     => Character32] | _ := 
  <import:org.cubik.cle.binary.*>

def byte := 0..255

def OP_ROOT         :=  1
def OP_LIT_WHOLENUM :=  2
def OP_LIT_NEGINT   :=  3
def OP_LIT_FLOAT64  :=  4
def OP_LIT_CHAR     :=  5
def OP_LIT_STRING   :=  6
def OP_IMPORT       :=  7
def OP_IBID         :=  8
def OP_CALL         :=  9
def OP_DEFINE       := 10
def OP_PROMISE      := 11
def OP_DEFREC       := 12

/**
 * DataECode bytecodes is the compact fast form of the DataECode instruction
 * set.
 * <p>
 * A kit is a set of utilities for manipulating things of a particular kind.
 * The deBytecodeKit provides for recognition (dispatch) and building
 * (code generation) of this instruction set.
 *
 * @see <a hrep=
 *       "http://www.erights.org/data/serial/jhu-paper/modeling.html#as-eval"
 * >Unserialization as Expression Evaluation</a>.
 * @author Mark S. Miller
 */
def deBytecodeKit implements DeepFrozen {

    /**
     * Makes a builder whose output (the result of buildRoot()) is a byte
     * array holding a well-formed sequence of instructions.
     */
    to makeBuilder() :near {

        def baos := makeAppendStream(def buffer := [].diverge(byte))

        def subBuilder := deBytecodeKit.makeStreamBuilder(baos)

        def wrappingBuilder extends subBuilder \
                            implements DEBuilderOf(void, List[byte]) {

            to getRootType() :near { List[byte] }

            to buildRoot(root) :List[byte] {
                super.buildRoot(root)
                baos.reserve().resolve(null)
                buffer.snapshot()
            }
        }
    }

    to makeStreamBuilder(baos) :near { # baos :OutStream -- XXX DeepFrozen
      
        def writeWholeNum := WholeNum.writingTo(baos)
        def writeByte := UnsignedInteger[8].writingTo(baos)
        def writeUTF := UTF8StringWithLength16.writingTo(baos)
        def writeChar := Character32.writingTo(baos)
        def writeDouble := Float64.writingTo(baos)

        # The index of the next temp variable
        var nextTemp := 0

        def deBytecodeBuilder implements DEBuilderOf(void, void) {

            to getNodeType() :near { void }
            to getRootType() :near { void }

            to buildRoot(_) :any {
                writeByte(OP_ROOT)
                baos.flush()
            }

            to buildLiteral(value) :void {
                switch (value) {
                    match i :int {
                        if (i >= 0) {
                            writeByte(OP_LIT_WHOLENUM)
                            writeWholeNum(i)
                        } else {
                            writeByte(OP_LIT_NEGINT)
                            writeWholeNum(-i)
                        }
                    }
                    match f :float64 {
                        writeByte(OP_LIT_FLOAT64)
                        writeDouble(f)
                    }
                    match c :char {
                        writeByte(OP_LIT_CHAR)
                        writeChar(c)
                    }
                    match str :String {
                        writeByte(OP_LIT_STRING)
                        writeUTF(str)
                    }
                }
            }

            to buildImport(varName :String) :void {
                writeByte(OP_IMPORT)
                writeUTF(varName)
            }

            to buildIbid(tempIndex :int) :void {
                writeByte(OP_IBID)
                writeWholeNum(tempIndex)
            }

            to buildCall(_, verb :String, args :List[void]) :void {
                writeByte(OP_CALL)
                writeUTF(verb)
                writeWholeNum(args.size())
            }

            to buildDefine(_) :Tuple[void, int] {
                def tempIndex := nextTemp
                nextTemp += 1
                writeByte(OP_DEFINE)
                [null, tempIndex]
            }

            to buildPromise() :int {
                def promIndex := nextTemp
                def resIndex := promIndex + 1
                nextTemp += 2
                writeByte(OP_PROMISE)
                promIndex
            }

            to buildDefrec(resIndex :int, _) :void {
                writeByte(OP_DEFREC)
                writeWholeNum(resIndex)
            }
        }
    }

    /**
     *
     */
    to recognize(code :List[byte], builder) :(builder.getRootType()) {
        deBytecodeKit.recognizeStream(code.asStream(), builder)
    }

    /**
     *
     */
    to recognizeStream(ins, builder) :(builder.getRootType()) { # ins :InStream
        def takeWholeNum := WholeNum.takingFrom(ins, now)
        def takeByte := UnsignedInteger[8].takingFrom(ins, now)
        def takeUTF := UTF8StringWithLength16.takingFrom(ins, now)
        def takeDouble := Float64.takingFrom(ins, now)
        def takeChar := Character32.takingFrom(ins, now)
        def stack := [].diverge()

        while (true) {
            switch (takeByte()) {
                match ==OP_ROOT {
                    return builder.buildRoot(stack.pop())
                }
                match ==OP_LIT_WHOLENUM {
                    stack.push(builder.buildLiteral(takeWholeNum()))
                }
                match ==OP_LIT_NEGINT {
                    stack.push(builder.buildLiteral(-(takeWholeNum())))
                }
                match ==OP_LIT_FLOAT64 {
                    stack.push(builder.buildLiteral(takeDouble()))
                }
                match ==OP_LIT_CHAR {
                    stack.push(builder.buildLiteral(takeChar()))
                }
                match ==OP_LIT_STRING {
                    stack.push(builder.buildLiteral(takeUTF()))
                }
                match ==OP_IMPORT {
                    stack.push(builder.buildImport(takeUTF()))
                }
                match ==OP_IBID {
                    stack.push(builder.buildIbid(takeWholeNum()))
                }
                match ==OP_CALL {
                    def verb := takeUTF()
                    def arity := takeWholeNum()
                    def stackSize := stack.size()
                    def firstArgIndex := stackSize - arity
                    def args := stack.removeRun(firstArgIndex, stackSize)
                    def rec := stack.pop()
                    stack.push(builder.buildCall(rec, verb, args))
                }
                match ==OP_DEFINE {
                    # buildDefine normally hands back its argument, in which
                    # case this code does not effect the stack.
                    stack.push(builder.buildDefine(stack.pop())[0])
                }
                match ==OP_PROMISE {
                    builder.buildPromise()
                }
                match ==OP_DEFREC {
                    stack.push(builder.buildDefrec(takeWholeNum(),
                                                   stack.pop()))
                }
            }
        }
    }
}
