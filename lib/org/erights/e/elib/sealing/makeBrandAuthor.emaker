# Copyright 2005-2006 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

# Modified by Mark S. Miller to implement an idea by Ka-Ping Yee explained at
# http://www.erights.org/elang/kernel/auditors/index.html
# This variation allows Sealers & Unsealers to be DeepFrozen.

pragma.syntax("0.9")
pragma.enable("explicit-result-guard")

def makeBrandAuthor { # not DeepFrozen, for dependencies
  to run(DeepFrozenWhichever) :any {
    def makeBrand implements DeepFrozenWhichever {
      to run(label :String) :any {
        
        def key {}
            
        # Would be interface {} but that needs this via DeepFrozen
        /** Only SealedBoxes of this Brand */
        def BoxStamp {
          to audit(_) :boolean { return true }
        }
        
        def BoxGuard {
          to coerce(specimen, optEjector) :any {
            # XXX standard-coerce
            return if (__auditedBy(BoxStamp, specimen)) { 
              specimen 
            } else { 
              def coerced := specimen.__conformTo(BoxGuard)
              if (__auditedBy(BoxStamp, specimen)) { 
                coerced
              } else { 
                throw.eject(optEjector, E.toQuote(specimen) + " is not a " + label + " sealed box")
              }
            }
          }
        }
        
        def brand implements DeepFrozenWhichever {
          to __printOn(out :TextWriter) :void {
            out.print(label)
          }
        }
        
        def sealer implements DeepFrozenWhichever {
          to __printOn(out :TextWriter) :void {
            out.print("<", brand, " sealer>")
          }
          
          # XXX optSealedDispatch uncall
          
          /** Return the Brand of this sealer/unsealer set. */
          to getBrand() :any { return brand }
          
          to seal(content) :any {
            
            # sealedBox should *not* also implement OptionallyDeepFrozen, as
            # that would leak information about whether the contents are
            # DeepFrozen
            def sealedBox implements BoxStamp {
              to __printOn(out :TextWriter) :void {
                out.print("<sealed by ", brand, ">")
              }
              
              # XXX optSealedDispatch uncall
              
              /** Return the Brand of the Unsealer which can unseal this box. */
              to getBrand() :any { return brand }
              
              /** An implementation detail. */
              to _offerContent(k) :any {
                require(key == k, fn{"Can't unseal - wrong key"})
                return content
              }
            }
            return sealedBox
          }
        }
        
        def unsealer implements DeepFrozenWhichever {
          to __printOn(out :TextWriter) :void {
            out.print("<", brand, " unsealer>")
          }
          
          # XXX optSealedDispatch uncall
          
          /** Return the Brand of this sealer/unsealer set. */
          to getBrand() :any { return brand }
          
          /** .unseal(specimen, throw) */
          to unseal(specimen) :any {
            return unsealer.unseal(specimen, throw)
          }
          
          # The implementation structure is partially described in the
          # documentation here since it affects how the unsealer behaves
          # when given an object which pretends to be our sealed box.
          /** Unseal a SealedBox: return its contents.
              
              Coerces specimen by BoxGuard (giving a wrapping specimen the
              opportunity to __conformTo(BoxGuard)). If this succeeds, ask
              the resulting SealedBox of our Brand to _offerContent(key).
              
              Note that an object which successfully unseals will not
              necessarily give the same contents on a second unsealing
              because it might __conformTo differently. */
          to unseal(specimen, optEjector) :any {
            def box :BoxGuard exit optEjector := specimen
            return box._offerContent(key)
          }
        }
        
        def brandKit implements DeepFrozenWhichever {
          to __printOn(out :TextWriter) :void {
            out.print("<", brand, " brand kit>")
          }
          
          # XXX optUncall
          
          # XXX add list-imitating get/1
          # XXX no tests for getSealer, getUnsealer
          
          to getSealer()   :any { return sealer }
          to getUnsealer() :any { return unsealer }
          
          /** Return the Brand of this sealer/unsealer set. */
          to getBrand() :any { return brand }
          
          # XXX getSealer/getUnsealer methods
          /**
           * This brand kit will coerce to a tuple, so that it may be
           * matched against a list pattern like epatt`[sealer, unsealer]`.
           */
          to __conformTo(guard) :any { switch (guard) {
            match ==<type:org.erights.e.elib.tables.ConstList> {
              return [sealer, unsealer]
            }
            match _ { return brandKit }
          }}
        }
        
        return brandKit
      }
    }
    
    return makeBrand
  }
}