# Copyright 2007-2008 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")

def UnsignedInteger := <import:org.cubik.cle.binary.UnsignedInteger>

def SignedInteger implements DeepFrozen, ExitViaHere {
  to get(bitCount :(int >= 0)) {
    def UnsignedIntegerSpecific := UnsignedInteger[bitCount]
    def valueBitCount := bitCount - 1
    return def SignedIntegerSpecific extends ((-(2**valueBitCount))..!(2**valueBitCount)) implements DeepFrozen { # implements Binary
      to writingTo(out) { # , schedule
        def writeU := UnsignedIntegerSpecific.writingTo(out)
        return def writer(value :SignedIntegerSpecific) {
          writeU(value & (2**bitCount-1))
        }
      }
      to takingFrom(ins, schedule) {
        def takeU := UnsignedIntegerSpecific.takingFrom(ins, schedule)
        def signMask := (1 << (bitCount-1))
        return def taker() :(schedule.result(SignedIntegerSpecific)) {
          return schedule.whenResolved(takeU(), fn u {
            u - ((u & signMask) << 1)
          })
        }
      }
    }
  }
}