# Copyright 2005 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.enable("easy-return")
pragma.disable("explicit-result-guard")
pragma.enable("dot-props")

def makeInStreamShell := <elib:eio.makeInStreamShell>
def NOW := EIO::NOW
def ELEMENTS := EIO::ELEMENTS

def terminate implements DeepFrozen { to run(stream, terminator) {
  switch (Ref.optProblem(terminator)) {
    match p :notNull { stream.fail(p) }
    match ==null     { stream.close() }
    match _          { throw("reality failure") }
  }
}}

def mapStream implements DeepFrozen {
  /** Return an InStream which takes elements from the given InStream and provides the result of the given function applied to lists of elements. */
  to chunked(outType :Guard, sourceStream, func) :any {
    def update
    
    Ref.whenResolved(sourceStream.terminates(), def updateOnTerminate(_) {
      update()
    })
  
    def ourStream := makeInStreamShell(outType, def backend, def mapStreamImpl {
      to __printOn(tw :TextWriter) {
        tw.print(func)
        tw.write("-")
        tw.quote(sourceStream)
      }
      
      to semiObtain(count :EIO::Range, proceed, report) {
        def original := sourceStream.obtain(count, count, NOW, proceed, report)
        update() # XXX side effects?
        return if (report == ELEMENTS) {
                 func(original)
               } else {
                 original
               }
      }
      
      # to tryAvailable... -- XXX this seems to have been intended to exist but isn't actually used. figure out what was intended.
      
      to terminate(t) { terminate(sourceStream, t) }
    })

    bind update() {
      # XXX propagate remaining
      backend.setAvailable(sourceStream.available())
      if (Ref.isResolved(def t := sourceStream.terminates())) {
        terminate(ourStream, t)
      }
    }
    
    update()
    
    return ourStream 
  }
  
}

# XXX should there be a failure-problem-mapping function parameter?

# XXX this file has no tests except in that it is currently used by charsets.emaker
