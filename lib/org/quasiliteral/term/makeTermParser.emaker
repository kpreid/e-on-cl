# Copyright 2005 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.enable("easy-return")
pragma.disable("explicit-result-guard")
pragma.enable("verb-curry")

def mapStream := <import:org.cubik.cle.io.mapStream>

def makeTermParser implements DeepFrozen {
  to run(builder) {

    # XXX move outside once it is DeepFrozen
    def lalr1__quasiParser := <import:org.cubik.cle.parser.makeLALR1Parser>.getLalr1__quasiParser()
  
    def b := builder
    
    def lparser := lalr1`
      "TermL" := start.
      start := term                         => ${b.start}.
      term := functor                       => ${b.term}.
      term := functor ${"("} argList ${")"} => ${def _(f,_,a,_) {
                                                   return b.term(f,a)}}.
      argList := term                       => $__identityFunc.
      argList := term ${","} argList        => ${b.seq}.
      functor := tag                        => $__identityFunc.
      tag := ${"Tag"}                       => ${b.tag}.
    `
    
    def termParser {
      /** Parse the given stream of term-language text to a quasi-term tree. */
      to parseText(textStream) {
        return termParser.parse(<import:org.quasiliteral.term.makeTermLexer>(builder.doesQuasis())(textStream))
      }
      
      /** Parse the given stream of term-language tokens to a quasi-term tree. */
      to parse(lexStream) {
        return lparser.parse(mapStream(any, lexStream, def tf(t) {
          return switch (t) {
            match [x] { [x, null] }
            match [x,y] { [x, y] }
            match [x] + y { [x, y] }
          }
        }))
      }
    }
    return termParser
  }
}